[{"authors":["admin"],"categories":null,"content":"I am a research scientist at the Dutch Healthcare Authority and extramural fellow at Tilburg University, working on health policy and statistical methods. I have a background in experimental physics, with a PhD in Biophysics.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a research scientist at the Dutch Healthcare Authority and extramural fellow at Tilburg University, working on health policy and statistical methods. I have a background in experimental physics, with a PhD in Biophysics.","tags":null,"title":"Gertjan Verhoeven","type":"authors"},{"authors":null,"categories":["Statistics","Data science","Measurement"],"content":"  (Image is from a different antigen test)\nMany people are suspicious about the reliability of rapid self-tests, so I decided to check it out. For starters, I LOVE measurement. It is where learning from data starts, with technology and statistics involved. With this post, I’d like to join the swelling ranks of amateur epidemiologists :) I have spent a few years in a molecular biology lab, that should count for something right?\nAt home, we now have a box of the SARS-CoV-2 Rapid Antigen Test Nasal kit. The kit is distributed by Roche, and manufactured in South Korea by a company called SD Biosensor.\nSo how reliable is it? A practical approach is to compare it to the golden standard, the PCR test, that public health test centers use to detect COVID-19. Well, the leaflet of the kit describes three experiments that do exactly that! So I tracked down the data mentioned in the kit’s leaflet, and decided to check them out.\nBut before we analyze the data, you want to know how they were generated, right? RIGHT? For this we use cause-effect diagrams (a.k.a. DAGs), which we can quickly draw using DAGitty.\nA causal model of the measurement process The cool thing about DAGitty is that we can use a point-n-click interface to draw the diagram, and then export code that contains an exact description of the graph to include in R. (You can also view the graph for this blog post at DAGitty.net):\nThe graph is based on the following description of the various cause-effect pairs:\nIt all starts with whether someone is infected. After infection, virus particles start to build up. These particles can be in the lungs, in the throat, nose etc. These particles either do or do not cause symptoms. Whether there are symptoms will likely influence the decision to test, but there will also be people without symptoms that will be tested (i.e. if a family member was tested positive).\nIn the experiments we analyze, two samples were taken, one for the PCR test and one for the antigen test. The way the samples were taken differed as well: “shallow” nose swabs for the rapid antigen test, and a combination of “deep” nose and throat swabs for the PCR test.\nNow that we now a bit about the measurement process, lets look at how the accuracy of the antigen test is quantified.\n Quantifying the accuracy of an COVID-19 test The PCR test result serves as the ground truth, the standard to which the antigen test is compared. Both tests are binary tests, either it detects the infection or it does not (to a first approximation).\nFor this type of outcome, two concepts are key: the sensitivity (does the antigen test detect COVID when the PCR test has detected it) and specificity of the test (does the antigen test ONLY detect COVID, or also other flu types or even unrelated materials, for which the PCR test produces a negative result).\nThe leaflet contains information on both.\n Sensitivity 83.3% (95%CI: 74.7% - 90.0%) Specificity 99.1% (95%CI: 97.7% - 99.7%)  But what does this really tell us? And where do these numbers come from?\nBefore we go to the data, we first need to know a bit more detail on what we are actually trying to measure, the viral load, and what factors influence this variable.\n Viral load as target for measurement So, both tests work by detecting viral particles in a particular sample. The amount of virus particles present in the sample depends on, among others:\n Time since infection How and where the sample is taken (throat, nose, lungs, using a swab etc)  I’ll discuss both.\nTime since infection When you have just been infected, your body will contain only a small amount of virus. The viral load is a function of time since infection, because it takes time for the virus to multiply itself. Even PCR cannot detect an infection on the first day, and even after 8 days, there are still some 20% of cases that go undetected by PCR (presumably because the amount of viral particle is too low) (Ref: Kucirka et al 2020).\nIf you want to know more about the ability of PCR to detect COVID infections go check out the covidRTPCR Github repository. It is completely awesome, with open data, open code, and Bayesian statistics using Stan!\n How and where the sample is taken There are many ways to obtain a sample from a person.\nHere the golden standard is a so-called Nasopharyngeal swab. This goes through your nose all the way (~ 5 cm) into the back of the throat, and is highly uncomfortable. Typically, only professional health workers perform nasopharyngeal swabs. In these experiments, this deep nose swab was combined with a swab from the throat (oroharyngeal). This is also how test centers in the Netherlands operated during the last year.\nThere are various alternatives: We have spit, saliva, we can cough up “sputum” (slime from the lungs) or we can take swab from the front part of the nose (“nasal”).\nThe Roche antigen test is a nasal test that only goes up to 2 cm in the nose and can be used by patients themselves (“self-collected”).\n  The dataset: results from the three Berlin studies Now that we have some background info, we are ready to check the data!\nAs mentioned above, this data came from three experiments on samples from in total 547 persons.\nAfter googling a bit, I found out that the experiments were performed by independent researchers in a famous University hospital in Berlin, Charité. After googling a bit more and mailing with one of the researchers involved, Dr. Andreas Lindner, I received a list of papers that describe the research mentioned in the leaflet (References at the end of this post).\nThe dataset for the blog post compares nasal samples tested with the Roche Antigen test kit, to PCR-tested nasopharyngeal plus oropharyngeal samples taken by professionals.\nThis blog post is possible because the three papers by Lindner and co-workers all contain the raw data as a table in the paper. Cool! Unfortunately, this means the data is not machine readable. However, with a combination of manual tweaking / find-replace and some coding, I tidied the data of the three studies into a single tibble data frame. You can grab the code and data from my Github.\nUPDATE: Rein Halbersma showed me how to use web scraping to achieve the same result, with a mere 20 lines of code of either Python or R! Cool! I added his scripts to my Github as well, go check them out, I will definitely go this route next time.\n# creates df_pcr_pos source(\u0026quot;sars_test/dataprep_roche_test.R\u0026quot;) # creates df_leaflet source(\u0026quot;sars_test/dataprep_roche_test_leaflet.R\u0026quot;) # see below source(\u0026quot;sars_test/bootstrap_conf_intervals.R\u0026quot;) The dataset df_pcr_pos contains, for each PCR positive patient:\n ct_value viral_load days_of_symptoms mm_value (Result of a nasal antigen test measurement, 1 is positive, 0 is negative)  To understand the PCR data, we need to know a bit more about the PCR method.\nThe PCR method The PCR method not only measures if someone is infected, it also provides an estimate of the viral load in the sample. How does this work? PCR can amplify, in so-called cycles, really low quantities of viral material in a biological sample. The amount of cycles of the PCR device needed to reach a threshold of signal is called the cycle threshold or Ct value. The less material we have in our sample, the more cycles we need to amplify the signal to reach a certain threshold.\nBecause the amplification is an exponential process, if we take the log of the number of virus particles, we get a linear inverse (negative) relationship between ct_value and viral_load. For example, \\(10^6\\) particles is a viral load of 6 on the log10 scale.\nSo let’s plot the ct_value of the PCR test vs the viral_load:\nset.seed(123) ggplot(df_pcr_pos, aes(x = ct_value, y = viral_load, color = factor(pcr_assay_type))) + geom_point() + ggtitle(\u0026quot;Calibration curves for viral load (log10 scale)\u0026quot;) This plot shows that viral_load is directly derived from the ct_value through a calibration factor. PCR Ct values of \u0026gt; 35 are considered as the threshold value for detecting a COVID infection using the PCR test, so the values in this plot make sense for COVID positive samples.\nTake some time to appreciate the huge range difference in the samples on display here. From only 10.000 viral particles (\\(log_{10}{(10^4)} = 4\\) ) to almost 1 billion (\\(log_{10}{(10^9)} = 9\\) ) particles.\nWe can also see that apparently, there were two separate PCR assays (test types), each with a separate conversion formula used to obtain the estimated viral load.\n(N.b. The missings for pcr_assay_type are because for two of three datasets, it was difficult to extract this information from the PDF file. From the plot, we can conclude that for these datasets, the same two assays were used since the values map onto the same two calibration lines)\n Sensitivity of the Antigen test The dataset contains all samples for which the PCR test was positive. Let’s start by checking the raw percentage of antigen test measurements that are positive as well. This is called the sensitivity of a test.\nres \u0026lt;- df_pcr_pos %\u0026gt;% summarize(sensitivity = mean(mm_value), N = n()) res ## # A tibble: 1 x 2 ## sensitivity N ## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 0.792 120 So for all PCR positive samples, 79.2 % is positive as well. This means that, on average, if we would use the antigen test kit, we have a one in five (20%) probability of not detecting COVID-19, compared to when we would have used the method used by test centers operated by the public health agencies.\nThis value is slightly lower, but close to what is mentioned in the Roche kit’s leaflet.\nLet’s postpone evaluation of this fact for a moment and look a bit closer at the data. For example, we can example the relationship between viral_load and a positive antigen test result (mm_value = 1):\ntable(df_pcr_pos$mm_value, df_pcr_pos_np$mm_value) ## ## 0 1 ## 0 20 5 ## 1 5 90 set.seed(123) ggplot(df_pcr_pos, aes(x = viral_load, y = mm_value)) + geom_jitter(height = 0.1) + geom_smooth() + geom_vline(xintercept = c(5.7, 7), col = \u0026quot;red\u0026quot;) From this plot, we can see that the probability of obtaining a false negative result (mm_value of 0) on the antigen test decreases as the viral load of the PCR sample increases.\nFrom the data we also see that before the antigen test to work about half of the time (blue line at 0.5), the PCR sample needs to contain around \\(5 \\cdot 10^5\\) viral particles (log10 scale 5.7), and for it to work reliably, we need around \\(10^7\\) particles (“high” viral load) in the PCR sample (which is a combination of oropharyngeal and nasopharyngeal swab). This last bit is important: the researchers did not measure the viral load in the nasal swabs used for the antigen test, these are likely different.\nFor really high viral loads, above \\(10^7\\) particles in the NP/OP sample, the probability of a false negative result is only a few percent:\ndf_pcr_pos %\u0026gt;% filter(viral_load \u0026gt;= 7) %\u0026gt;% summarize(sensitivity = mean(mm_value), N = n()) ## # A tibble: 1 x 2 ## sensitivity N ## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 0.972 71   Viral loads varies with days of symptoms Above, we already discussed that the viral load varies with the time since infection.\nIf we want to use the antigen test instead of taking a PCR test, we don’t have information on the viral load. What we often do have is the days since symptoms, and we know that in the first few days of symptoms viral load is highest.\nWe can check this by plotting the days_of_symptoms versus viral_load:\nggplot(df_pcr_pos, aes(x = days_of_symptoms, y = viral_load)) + geom_smooth() + expand_limits(x = -4) + geom_vline(xintercept = 1, linetype = \u0026quot;dashed\u0026quot;) + geom_vline(xintercept = c(3, 7), col = \u0026quot;red\u0026quot;) + geom_hline(yintercept = 7, col = \u0026quot;grey\u0026quot;, linetype = \u0026quot;dashed\u0026quot;) + geom_jitter(height = 0, width = 0.2)  From this plot, we learn that the viral load is highest on the onset of symptoms day (typically 5 days after infection) and decreases afterwards.\nAbove, we saw that the sensitivity in the whole sample was not equal to the sensitivity mentioned in the leaflet. When evaluating rapid antigen tests, sometimes thresholds for days of symptoms are used, for example \u0026lt;= 3 days or \u0026lt;= 7 days (plotted in red).\nFor the sensitivity in the leaflet, a threshold of \u0026lt;= 7 days was used on the days of symptoms.\nLet us see how sensitive the antigen test is for these subgroups:\nres \u0026lt;- df_pcr_pos %\u0026gt;% filter(days_of_symptoms \u0026lt;= 3) %\u0026gt;% summarize(label = \u0026quot;\u0026lt; 3 days\u0026quot;, sensitivity = mean(mm_value), N = n()) res2 \u0026lt;- df_pcr_pos %\u0026gt;% filter(days_of_symptoms \u0026lt;= 7) %\u0026gt;% summarize(label = \u0026quot;\u0026lt; 7 days\u0026quot;, sensitivity = mean(mm_value), N = n()) bind_rows(res, res2) ## # A tibble: 2 x 3 ## label sensitivity N ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 \u0026lt; 3 days 0.857 49 ## 2 \u0026lt; 7 days 0.85 100 The sensitivity in both subgroups is increased to 85.7 % and 85 %. Now only 1 in 7 cases is missed by the antigen test. This sensitivity is now very close to that in the leaflet. The dataset in the leaflet has N = 102, whereas here we have N = 100. Given that the difference is very small, I decided to not look into this any further.\n Is there a swab effect? Ok, so the rapid antigen test is less sensitive than PCR. What about the effect of using self-administered nasal swabs, versus professional health workers taking a nasopharyngeal swab (and often a swab in the back of the throat as well)?\nInterestingly, the three Berlin studies all contain a head-to-head comparison of nasal versus nasopharygeal (NP) swabs. Lets have a look, shall we?\nThe dataset df_pcr_pos_np is identical to df_pcr_pos, but contains the measurement results for the nasopharygeal swabs.\nTo compare both measurement methods, we can plot the relationship between the probability of obtaining a positive result versus viral load. If one method gathers systematically more viral load from the patient, we expect that method to detect infection at lower patient viral loads, and the curves (nasal vs NP) would be shifted relative to each other.\nset.seed(123) ggplot(df_pcr_pos_np , aes(x = viral_load, y = mm_value)) + geom_jitter(data = df_pcr_pos, height = 0.05, col = \u0026quot;blue\u0026quot;) + geom_jitter(height = 0.05, col = \u0026quot;orange\u0026quot;) + geom_smooth(data = df_pcr_pos , col = \u0026quot;blue\u0026quot;) + geom_smooth(col = \u0026quot;orange\u0026quot;) + ggtitle(\u0026quot;nasal (blue) versus nasopharyngeal (orange) swabs\u0026quot;) By fitting a smoother through the binary data, we obtain an estimate of the relationship between the probability of obtaining a positive result, and the viral load of the patient as measured by PCR on a combined NP/OP swab.\nFrom this plot, I conclude that:\n The sensitivity of a test is strongly dependent on the distribution of viral loads in the population the measurement was conducted in There is no evidence for any differences in sensitivity between nasal and nasopharyngeal swabs  This last conclusion came as a surprise for me, as nasopharygeal swabs are long considered to be the golden standard for obtaining samples for PCR detection of respiratory viruses, such as influenza and COVID-19 (Seaman et al. (2019), (Lee et al. 2021) ). So let’s look a bit deeper still.\n Double-check: Rotterdam vs Berlin We can compare the results from the three Berlin studies with a recent Dutch study that also used the Roche antigen test (ref: Igloi et al. 2021). The study was conducted in Rotterdam, and used nasopharygeal swabs to obtain the sample for the antigen test.\nCool! Lets try and create two comparable groups in both studies so we can compare the sensitivity.\nThe Igloi et al. paper reports results for a particular subset that we can also create in the Berlin dataset. They report that for the subset of samples with high viral load (viral load \\(2.17 \\cdot 10^5\\) particles / ml = 5.35 on the log10 scale, ct_value \u0026lt;= 30) AND who presented within 7 days of symptom onset, they found a sensitivity of 95.8% (CI95% 90.5-98.2). The percentage is based on N = 159 persons (or slightly less because of not subsetting on \u0026lt;= 7 days of symptoms, the paper is not very clear here).\nWe can check what the sensitivity is for this subgroup in the Berlin dataset:\ndf_pcr_pos %\u0026gt;% filter(viral_load \u0026gt;= 5.35 \u0026amp; days_of_symptoms \u0026lt;= 7) %\u0026gt;% summarize(sensitivity = mean(mm_value), N = n()) ## # A tibble: 1 x 2 ## sensitivity N ## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 0.898 88 In the same subgroup of high viral load, sensitivity of the nasal swab test is 6% lower than the nasopharyngeal swab test, across the two studies. But how do we have to weigh this evidence? N = 88 is not so much data, and the studies are not identical in design.\nImportantly, since the threshold to be included in this comparison (ct value \u0026lt;= 30, viral_load \u0026gt; 5.35) contains a large part of the region where the probability of a positive result is between 0 and 1, we need to compare the distributions of viral loads for both studies to make an apples to apples comparison.\nThe Igloi study reports their distribution of viral loads for PCR-positive samples (N=186) in five bins (Table 1 in their paper):\ncat \u0026lt;- c(\u0026quot;ct \u0026lt;= 20\u0026quot;, \u0026quot;ct 20-25\u0026quot;, \u0026quot;ct 25-30\u0026quot;, \u0026quot;ct 30-35\u0026quot;, \u0026quot;ct 35+\u0026quot;) counts \u0026lt;- c(31, 82, 46, 27, 1) ggplot(data.frame(cat, counts), aes(x = cat, y = counts)) + geom_col() Lets create those same bins in the Berlin dataset as well:\ndf_pcr_pos$ct_bin \u0026lt;- cut(df_pcr_pos$ct_value, breaks = c(-Inf,20,25,30,35,Inf)) ggplot(df_pcr_pos, aes(x = ct_bin)) + geom_histogram(stat = \u0026quot;count\u0026quot;) For the subset where we can compare the sensitivities (ct_value \u0026lt;= 30), the Berlin clinical population has a higher viral load than the Rotterdam clinical population! So that does not explain why the Rotterdam study reports a higher sensitivity.\nI use simulation to create distributions of plausible values for the sensitivity, assuming the observed values in both studies (89.7% for the Berlin studies, and 95.8% for the Rotterdam study) to be the true data generating values.\nset.seed(123) # Berlin sample_size = 88 prior_probability = 0.898 est_p \u0026lt;- rbinom(10000, sample_size, p=prior_probability)/sample_size # Rotterdam sample_size2 = 159 # derived from Table 1 (Ct value distribution of PCR+ samples, \u0026lt;= 30) prior_probability2 = 0.958 est_p2 \u0026lt;- rbinom(10000, sample_size2, p=prior_probability2)/sample_size2 ggplot(data.frame(est_p), aes(x = est_p)) + geom_histogram(binwidth = 0.005) + geom_histogram(data = data.frame(est_p = est_p2), fill = \u0026quot;gray60\u0026quot;, alpha = 0.5, binwidth = 0.005) + geom_vline(xintercept = prior_probability, linetype = \u0026quot;dashed\u0026quot;, col= \u0026quot;red\u0026quot;) + geom_vline(xintercept = prior_probability2, linetype = \u0026quot;dashed\u0026quot;, col= \u0026quot;blue\u0026quot;) + ggtitle(\u0026quot;Berlin (black bars) vs Rotterdam (grey bars) sensitivity for higher viral loads\u0026quot;) There is a region of overlap between the two distributions, so the difference between the studies could be (in part) attributed to statistical sampling variation for the same underlying process.\nI conclude that the Berlin study, who does a head to head comparison of NP versus nasal swabs, finds them to be highly comparable, and reports sensitivities that are close to those reported by the Rotterdam study.\nSurprisingly, nasal swabs appear to give results that are comparable to those of nasopharyngeal swabs, while having not having the disadvantages of them (unpleasant, can only be performed by professional health worker).\n That other metric: the specificity So far, the discussion centered around the sensitivity of the test. Equally important is the specificity of the test. This quantifies if the test result of the antigen test is specific for COVID-19. It would be bad if the test would also show a result for other viruses, or even unrelated molecules.\nTo examine this, we use the aggregated data supplied on the leaflet from the kit, df_leaflet.\nN.b. The aggregated data is a subset of all the data from the three studies, because the data was subsetted for cases with \u0026lt;= 7 days_of_symptoms.\nThis dataset contains for each sample one of four possibilities:\n Both tests are negative, both tests are positive, the PCR test is positive but the antigen test negative, the PCR test is negative but the antigen positive.  We use the yardstick package of R’s tidymodels family to create the 2x2 table and analyze the specificity.\n(Overthinking: Note that the yardstick package is used to quantify the performance of statistical prediction models by comparing the model predictions to the true values contained in the training data. This provides us with an analogy where the antigen test can be viewed as a model that is trying the predict the outcome of the PCR test.)\noptions(yardstick.event_first = FALSE) conf_matrix \u0026lt;- yardstick::conf_mat(df_leaflet, pcr_result, ag_result) autoplot(conf_matrix, type = \u0026quot;heatmap\u0026quot;, title = \u0026quot;Truth = PCR test, Prediction = Antigen test\u0026quot;) From the heatmap (confusingly called a confusion matrix among ML practioners), we see that:\n For most samples (N = 431), both tests are COVID-19 negative. 85 + 17 = 102 samples tested COVID-19 positive using the PCR-test 85 out of 102 samples that are PCR positive, are antigen test positive as well  For the specificity, we have to look at the samples where the PCR test is negative, but the antigen test is positive, and compare these to all the samples that are PCR-test negative. These are the number of tests where the antigen test picked up a non-specific signal. One minus this percentage gives the specificity (1 - 4/435 = 431/435):\nyardstick::spec(df_leaflet, pcr_result, ag_result) ## # A tibble: 1 x 3 ## .metric .estimator .estimate ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 spec binary 0.991 Thus, we find that the antigen test is highly specific, with around 1% of false positives.\n Uncertainty in the estimated specificity and sensitivity So far, we did not discuss the sampling variability in the estimated specificity and sensitivity.\nThe kit leaflet mentions the following confidence intervals:\n Sensitivity 83.3% (95%CI: 74.7% - 90.0%) Specificity 99.1% (95%CI: 97.7% - 99.7%)  The R-package yardstick does not yet include confidence intervals, so I generated these using bootstrapping. I calculate both metrics for 10.000 samples sampled from the raw data. For brevity I omitted the code here, go check out my Github for the R script.\nThe bootstrapping approach yields the following range of plausible values given the data (95% interval):\nquantile(spec_vec, probs = c(0.025, 0.975)) ## 2.5% 97.5% ## 0.9811765 0.9977477 quantile(sens_vec, probs = c(0.025, 0.975)) ## 2.5% 97.5% ## 0.7570030 0.9029126 The amount of data (N = 537) prevents us from getting an exact match to the leaflet’s confidence intervals, that are based on theoretic formulas. But we do get pretty close.\nEspecially for the sensitivity, there is quite some uncertainty, we see that plausible values range from 76% up to 90% for this particular cohort of cases with this particular mix of viral loads that showed up during the last four months of 2020 in the University hospital in Berlin.\n Conclusions To summarise: we found that the numbers of the kit’s leaflet are reliable, reproducible, and published in full detail in the scientific literature. Hurray!\nWe also found that even the gold standard PCR is not able to detect all infected persons, it all depends on how much virus is present, and how the sample is obtained.\nBut all in all, the PCR test is clearly more accurate. Why would we want to use an antigen test then? To do the PCR test you need a lab with skilled people, equipment such as PCR devices and pipets, and time, as the process takes at least a few hours to complete. The advantage of an antigen test is to have a low-tech, faster alternative that can be self-administered. But that comes at a cost, because the antigen tests are less sensitive.\nFrom the analysis, it is clear that the rapid Antigen tests need more virus present to reliably detect infection. It is ALSO clear that the test is highly specific, with less than 1% false positives. Note that a false positive rate of 1% still means that in a healthy population of 1000, 10 are falsely detected as having COVID-19.\nSurprisingly, nasal swabs appear to give results that are comparable to those of nasopharyngeal swabs, while having not having the disadvantages of them (unpleasant, can only be performed by professional health worker).\nSo the antigen tests are less sensitive than PCR tests. But now comes the key insight: the persons that produce the largest amounts of virus get detected, irrespective of whether they have symptoms or not. To me, this seems like a “Unique Selling Point” of the rapid tests: the ability to rapidly detect the most contagious persons in a group, after which these persons can go into quarantine and help reduce spread.\nThanks to dr. Andreas Lindner for providing helpful feedback and pointing out flaws in my original blog post. This should not be seen as an endorsement of the conclusions of this post, and any remaining mistakes are all my own!\n References  Head-to-head comparison of SARS-CoV-2 antigen-detecting rapid test with self-collected nasal swab versus professional-collected nasopharyngeal swab: Andreas K. Lindner, Olga Nikolai, Franka Kausch, Mia Wintel, Franziska Hommes, Maximilian Gertler, Lisa J. Krüger, Mary Gaeddert, Frank Tobian, Federica Lainati, Lisa Köppel, Joachim Seybold, Victor M. Corman, Christian Drosten, Jörg Hofmann, Jilian A. Sacks, Frank P. Mockenhaupt, Claudia M. Denkinger, European Respiratory Journal 2021 57: 2003961\n Head-to-head comparison of SARS-CoV-2 antigen-detecting rapid test with professional-collected nasal versus nasopharyngeal swab: Andreas K. Lindner, Olga Nikolai, Chiara Rohardt, Susen Burock, Claudia Hülso, Alisa Bölke, Maximilian Gertler, Lisa J. Krüger, Mary Gaeddert, Frank Tobian, Federica Lainati, Joachim Seybold, Terry C. Jones, Jörg Hofmann, Jilian A. Sacks, Frank P. Mockenhaupt, Claudia M. Denkinger European Respiratory Journal 2021 57: 2004430\n SARS-CoV-2 patient self-testing with an antigen-detecting rapid test: a head-to-head comparison with professional testing: Andreas K. Lindner, Olga Nikolai, Chiara Rohardt, Franka Kausch, Mia Wintel, Maximilian Gertler, Susen Burock, Merle Hörig, Julian Bernhard, Frank Tobian, Mary Gaeddert, Federica Lainati, Victor M. Corman, Terry C. Jones, Jilian A. Sacks, Joachim Seybold, Claudia M. Denkinger, Frank P. Mockenhaupt, under review, preprint on medrxiv.org\n Variation in False-Negative Rate of Reverse Transcriptase Polymerase Chain Reaction–Based SARS-CoV-2 Tests by Time Since Exposure: Lauren M. Kucirka, Stephen A. Lauer, Oliver Laeyendecker, Denali Boon, Justin Lessler Link to paper\n Clinical evaluation of the Roche/SD Biosensor rapid antigen test with symptomatic, non-hospitalized patients in a municipal health service drive-through testing site: Zsὁfia Iglὁi, Jans Velzing, Janko van Beek, David van de Vijver, Georgina Aron, Roel Ensing, KimberleyBenschop, Wanda Han, Timo Boelsums, Marion Koopmans, Corine Geurtsvankessel, Richard Molenkamp Link on medrxiv.org\n Performance of Saliva, Oropharyngeal Swabs, and Nasal Swabs for SARS-CoV-2 Molecular Detection: a Systematic Review and Meta-analysis: Rose A. Lee, Joshua C. Herigona, Andrea Benedetti, Nira R. Pollock, Claudia M. Denkinger Link to paper\n Self-collected compared with professional-collected swabbing in the diagnosis of influenza in symptomatic individuals: A meta-analysis and assessment of validity: Seaman et al 2019 Link to paper\n   ","date":1622937600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622937600,"objectID":"5d4a89d0fde58dd877021b14e28d4423","permalink":"/post/covid_antigen_test_reliability/","publishdate":"2021-06-06T00:00:00Z","relpermalink":"/post/covid_antigen_test_reliability/","section":"post","summary":"This blog post is about the Roche Rapid Antigen Test Nasal. How accurate is it? I tracked down the data mentioned in the kit's leaflet, discuss the whole measurement process and used R to reproduce the sensitivity and specificity of the test.","tags":["COVID-19","DAG","causal graph","Bayesian statistics"],"title":"Using R to analyse the Roche Antigen Rapid Test: How accurate is it?","type":"post"},{"authors":null,"categories":["Scientific writing"],"content":"  (This blog post is mainly for my future self, and for people that ask me about my workflow for scientific papers. Please contact me if you spot ways to improve this!)\nThis blog post describes a sequence of 9 steps to set up a reproducible workflow for scientific writing with a focus on getting the journal citation hell right. It boils down to writing the manuscript in Rmarkdown, and using a set of auxiliary tools to manage citations and output to Word to share with collaborators and to prepare the final document for submission to the journal.\nStep 1: Choose the target journal First step is to check what the constraints of the journal are where we want to submit. Do they have a particular word count? Do they have a particular format for the abstract? etc. Go to the target journal, and download the author instructions. Because author instructions are typically REALLY boring to read, a quick visual way to find out what is needed is to download a few recent (because change is the only constant), open access (no fuss with paywalls etc), and highly cited (this must mean they did something right, right?) example papers.\n Step 2: Install reference manager Zotero Zotero is THE open source reference manager. Source code on Github, check! Cross-platform, check! 4K stars on Github, check! Another cool feature is that your references library is stored online, and your local Zotero install synchronizes with it, so you no longer need to move around library files between work and home, laptop and desktop.\nGo to the Zotero website to download, install and configure Zotero. (This includes creating a Zotero account for online storage of your references)\n Step 3: Save citations to Zotero from your browser The easiest way to fill your Zotero library is to use a browser plugin. I use Firefox on Linux, so I installed the Zotero Firefox connector. Once this is installed, I use Google scholar to look up papers I want to cite. To add a paper to the Zotero library, make sure to have Zotero open, then click on a paper in Google Scholar to go to that paper’s web site (Typically the Publishers website for the journal). Finally, click the icon in the browsers top right top corner (“Save to zotero”). Repeat ad nauseam.\n Step 4: Create stable citation keys While writing our papers, we want short but recognizable identifier keys for our citations. For this we use the “Better BibTex for Zotero” Add-on. Go to the Better Bibtex website and follow the installation instructions.\nIn the Zotero preferences (Better bibtex tab), I changed the “Citation Key Format” to create keys like verhoeven_etal20.\n[auth.etal:lower:replace=.,_][\u0026gt;0][shortyear]|[veryshorttitle][shortyear] (This snippet comes from Dewey Dunnington’s blog that was a big help in getting my workflow up and running)\nThis should automatically create / update all the citations keys in Zotero.\n Step 5: Rstudio, Rmarkdown and all that Rstudio is where we actually write the paper. We use the .Rmd Rmarkdown format. This format consists of a YAML header, followed by a body that consists of Markdown formatted text with optional code chunks, figures and tables interspersed. Version control is through Git.\nImportant thing to check: make sure that your .Rmd file uses UTF-8 encoding. In Rstudio, File --\u0026gt; Save with Encoding --\u0026gt; UTF-8 can set this straight if somehow you ended up with a file in the wrong encoding.\nCheck the Rstudio website for more info on Rmarkdown.\nNote The latest version of Rstudio (1.4) contains a new editing mode for Rmarkdown, “the visual markdown editor”, that contains support for inserting citations from Zotero. I am not sure yet whether I like this, and noted that on my system, it was still buggy, and the editor, when invoked, makes CHANGES to the markdown code. Brrr. Therefore, this blog post does not make use of this new feature.\n Step 6: Connecting Rstudio to Zotero Hold on, almost there. We’re in Rstudio, and writing our paper. Now comes the moment where we want to cite something! Now we need a connection to Zotero. There are two Rstudio Addins that compete for this functionality, citr and rbbt. Both packages are not on CRAN and therefore need to be installed from Github. I tried them both out, and went for rbbt as citr does not support CSL-JSON and rbbt appears slightly leaner.\nremotes::install_github(\u0026quot;paleolimbot/rbbt\u0026quot;) After installing and restarting Rstdio, the rbbt addin can be found under Addins. Now since citing stuff is a common activity while writing a paper, we want a keyboard shortcut for this. I put it under CTRL + K where K stand for errr, Knowledge ?\nTo bind rbbt to a particular keyboard shortcut, do the following: First, in RStudio, choose Tools --\u0026gt; Modify Keyboard Shortcuts. Type zotero to filter out the Zotero plugin. Click on the ‘Shortcut’ field for the ‘Insert Zotero citation’ addin row, and type the desired shortcut keys.\nIn Rstudio, we can now press CTRL+K, type the name of the first author, select the citation, press enter, and have the citation key added to our .Rmd document.\n Step 7: Creating the bibliography Now that we have an Rmarkdown document filled with citation keys that references citations in Zotero, we still need one more thing, and that is to create the actual .bib or .json file containing the cited references.\nHere I describe the simplest approach. We go to Zotero and export all the references using “Export Collection” , and choosing CSL JSON, save the file as references.json in the same folder as your Rmd paper. CSL-JSON is an emerging standard that is recommended by Yihui Xie, author of Rmarkdown.\nIn Rstudio, we add to following line to our YAML header:\nbibliography: references.json rbbt has the functionality to automatically create a bib/json file that ONLY contains the references that are cited in the Rmd document. I haven’t tested this yet, but this would be the icing on the cake. Instructions for this are on the rbbt Github page.\n Step 8: Getting the references in the proper format At this point, we can knit our Rmarkdown document, and it will contain the cited references appended at the end of the HTML/PDF/Word generated output document.\nHowever, the references are (most likely) not yet properly formatted for the journal we want to send it to. For example, the journal “Health Services Research” wants the references in the main text to be numbered, and the reference list sorted in the order of appearance, and formatted according the APA format (whatever that is).\nLuckily for us, enter the Citation Style Language project. They created a common standard, CSL, and a crowdsourced repository, that contains more than 10.000 free citation styles. All we need to do is grab the CSL file for our target journal!\nGo to the Zotero Style Repository , search for the target journal name (in my case Health Services Research) and click on the result. This downloads a CSL file that we add to our Git repo containing the manuscript.\n Step 9: Make Rstudio output to Word for our collaborators Still here? Great. Now we are ready for the final step. This one is for our collaborators (who we feel sorry for, because they use Word and miss out on all the Rmarkdown fun), and for those journals, that force us to submit our manuscript as a Word file.\nIn Rstudio, we add the following code to the YAML header:\noutput: word_document: reference_docx: style_template.docx This tells Rmarkdown to use the Word formatting styles contained in the style_template.docx file. For me, this contains at the moment three things: A4 page size, double line spacing, and numbered lines.\nFollow the instructions by Rstudio to make this template. In short, you let Rstudio’s pandoc generate a Word document from a .Rmd file, and tweak the formatting styles of that document. Name the document style_template.docx and keep it with your .Rmd manuscript. I can confirm that this also works when you edit this document using LibreOffice / OpenOffice.\nThe great thing for me: now I have this blog post, I can forget about all this stuff, and finally get to the scientific writing part!\n ","date":1619913600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619913600,"objectID":"8efc101436c2382da3a74898392f2121","permalink":"/post/zotero-rmarkdown-csl/","publishdate":"2021-05-02T00:00:00Z","relpermalink":"/post/zotero-rmarkdown-csl/","section":"post","summary":"This blog post describes a sequence of 9 steps to set up a reproducible workflow for scientific writing based on open-source tooling. It boils down to writing the manuscript in Rmarkdown, and using a set of auxiliary tools to manage citations and output to Word to share with collaborators and to prepare the final document for submission to the journal.","tags":["Zotero","Rmarkdown","Better bibtex"],"title":"Writing scientific papers using Rstudio and Zotero","type":"post"},{"authors":null,"categories":["Machine Learning"],"content":" (Photo by Ryan Fishel on Unsplash)\nThis blog post concerns a famous “toy” problem in Reinforcement Learning, the FrozenLake environment. We compare solving an environment with RL by reaching maximum performance versus obtaining the true state-action values \\(Q_{s,a}\\). In doing so I learned a lot about RL as well as about Python (such as the existence of a ggplot clone for Python, plotnine, see this blog post for some cool examples).\nFrozenLake was created by OpenAI in 2016 as part of their Gym python package for Reinforcement Learning. Nowadays, the interwebs is full of tutorials how to “solve” FrozenLake. Most of them focus on performance in terms of episodic reward. As soon as this maxes out the algorithm is often said to have converged. For example, in this question on Cross-Validated about Convergence and Q-learning:\nIn practice, a reinforcement learning algorithm is considered to converge when the learning curve gets flat and no longer increases.\nNow, for Q-learning it has been proven that, under certain conditions, the Q-values convergence to their true values. But does this happens when the performance maxes out? In this blog we’ll see that this is not generally the case.\nWe start with obtaining the true, exact state-action values. For this we use Dynamic Programming (DP). Having implemented Dynamic Programming (DP) for the FrozenLake environment as an exercise notebook already (created by Udacity, go check them out), this was a convenient starting point.\nLoading the packages and modules We need various Python packages and modules.\n# data science packages import numpy as np import pandas as pd import plotnine as p9 import matplotlib.pyplot as plt %matplotlib inline # RL algorithms from qlearning import * from dp import * # utils from helpers import * from plot_utils import plot_values import copy import dill from frozenlake import FrozenLakeEnv env = FrozenLakeEnv(is_slippery = True)  Frozen Lake Environment description Winter is here. You and your friends were tossing around a frisbee at the park when you made a wild throw that left the frisbee out in the middle of the lake (G). The water is mostly frozen (F), but there are a few holes (H) where the ice has melted.\nIf you step into one of those holes, you’ll fall into the freezing water. At this time, there’s an international frisbee shortage, so it’s absolutely imperative that you navigate across the lake and retrieve the disc. However, the ice is slippery, so you won’t always move in the direction you intend.\nThe episode ends when you reach the goal or fall in a hole. You receive a reward of 1 if you reach the goal, and zero otherwise.\nThe agent moves through a \\(4 \\times 4\\) gridworld, with states numbered as follows:\n[[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15]] and the agent has 4 potential actions:\nLEFT = 0 DOWN = 1 RIGHT = 2 UP = 3 The FrozenLake Gym environment has been amended to make the one-step dynamics accessible to the agent. For example, if we are in State s = 1 and we perform action a = 0, the probabilities of ending up in new states, including the associated rewards are contained in the \\(P_{s,a}\\) array:\nenv.P[1][0] [(0.3333333333333333, 1, 0.0, False), (0.3333333333333333, 0, 0.0, False), (0.3333333333333333, 5, 0.0, True)] The FrozenLake environment is highly stochastic, with a very sparse reward: only when the agent reaches the goal, a reward of +1 is obtained. This means that if we do not set a discount rate, the agent can keep on wandering around without receiving a learning “signal” that can be propagated back through the preceding state-actions (since falling into the holes does not result in a negative reward) and thus learning very slowly. We will focus on the discounting case (gamma = 0.95) for this reason (less computation needed for convergence), but compare also with the undiscounted case.\n Solving Frozen Lake using DP Let us solve FrozenLake first for the no discounting case (gamma = 1). The Q-value for the first state will then tell us the average episodic reward, which for FrozenLake translates into the percentage of episodes in which the Agent succesfully reaches its goal.\npolicy_pi, V_pi = policy_iteration(env, gamma = 1, theta=1e-9, \\ verbose = False) plot_values(V_pi) The Q-value for state s = 0 is 0.824. This means that for gamma = 1 and following an optimal policy \\(\\pi^*\\), 82.4% of all episodes ends in succes.\nAs already mentioned above, for computational reasons we will apply Q-learning to the environment with gamma = 0.95. So… lets solve FrozenLake for gamma = 0.95 as well:\n# obtain the optimal policy and optimal state-value function policy_pi_dc, V_pi_dc = policy_iteration(env, gamma = 0.95, theta=1e-9, \\ verbose = False) Q_perfect = create_q_dict_from_v(env, V_pi_dc, gamma = 0.95) df_true = convert_vals_to_pd(V_pi_dc) plot_values(V_pi_dc) Now, comparing the optimal policies for gamma = 0.95 and for gamma = 1 (not shown here) we find that they are not the same. Therefore, 82.4% succes rate is likely an upper bound for gamma = 0.95, since introducing discounting in this stochastic environment can (intuitively) either have no effect on the optimal policy, or favor more risky (lower succes rate) but faster (less discounting) policies, leading to a lower overall succes rate.\nFor example, for the undiscounted case, the Agent is indifferent in choosing direction in the first state. If it ends up going right , it can choose UP and wander around at the top row at no cost until it reaches the starting state again. As soon as this wandering around gets a cost by discounting we see (not shown) that the Agent is no longer indifferent, and does NOT want to end up wandering in the top row, but chooses to play LEFT in state s = 0 instead.\n Checking the performance of an optimal greedy policy based on perfect Q-values Now that we have the \\(Q_{s,a}\\) values corresponding to the optimal policy given that gamma = 0.95, we can check its performance. To do so, we use brute force and simulate the average reward under the optimal policy for a large number of episodes.\nTo do so, I wrote a function test_performance() by taking the q_learning() function, removing the learning (Q-updating) part and setting epsilon to zero when selecting an action (i.e. a pure greedy policy based on a given Q-table).\nPlaying around with the binomial density in R (summary(rbinom(1e5, 1e5, prob = 0.8)/1e5) tells me that choosing 100.000 episodes gives a precision of around three decimals in estimating the probability of succes. This is good enough for me.\n# Obtain Q for Gamma = 0.95 and convert to defaultdict Q_perfect = create_q_dict_from_v(env, V_pi_dc, gamma = 0.95) fullrun = 0 if fullrun == 1: d = [] runs = 100 for i in range(runs): avg_scores = test_performance(Q_perfect, env, num_episodes = 1000, \\ plot_every = 1000, verbose = False) d.append({\u0026#39;run\u0026#39;: i, \u0026#39;avg_score\u0026#39;: np.mean(avg_scores)}) print(\u0026quot;\\ri {}/{}\u0026quot;.format(i, runs), end=\u0026quot;\u0026quot;) sys.stdout.flush() d_perfect = pd.DataFrame(d) d_perfect.to_pickle(\u0026#39;cached/scores_perfect_0.95.pkl\u0026#39;) else: d_perfect = pd.read_pickle(\u0026#39;cached/scores_perfect_0.95.pkl\u0026#39;)  round(np.mean(d_perfect.avg_score), 3) 0.781 Thus, we find that with the true optimal policy for gamma = 0.95, in the long run 78% of all episodes is succesful. This is therefore the expected plateau value for the learning curve in Q-learning, provided that the exploration rate has become sufficiently small.\nLet’s move on to Q-learning and convergence.\n “Solving” FrozenLake using Q-learning The typical RL tutorial approach to solve a simple MDP as FrozenLake is to choose a constant learning rate, not too high, not too low, say \\(\\alpha = 0.1\\). Then, the exploration parameter \\(\\epsilon\\) starts at 1 and is gradually reduced to a floor value of say \\(\\epsilon = 0.0001\\).\nLets solve FrozenLake this way, monitoring the learning curve (average reward per episode) as it learns, and compare the learned Q-values with the true Q-values found using DP.\nI wrote Python functions that generate a decay schedule, a 1D numpy array of \\(\\epsilon\\) values, with length equal to the total number of episode the Q-learning algorithm is to run. This array is passed on to the Q-learning algorithm, and used during learning.\nIt is helpful to visualize the decay schedule of \\(\\epsilon\\) to check that it is reasonable before we start to use them with our Q-learning algorithm. I played around with the decay rate until the “elbow” of the curve is around 20% of the number of episodes, and reaches the desired minimal end value (\\(\\epsilon = 0.0001\\)).\ndef create_epsilon_schedule(num_episodes, \\ epsilon_start=1.0, epsilon_decay=.9999, epsilon_min=1e-4): x = np.arange(num_episodes)+1 y = np.full(num_episodes, epsilon_start) y = np.maximum((epsilon_decay**x)*epsilon_start, epsilon_min) return y epsilon_schedule = create_epsilon_schedule(100_000) plot_schedule(epsilon_schedule, ylab = \u0026#39;Epsilon\u0026#39;) My version of the Q-learning algorithm has slowly evolved to include more and more lists of things to monitor during the execution of the algorithm. Every 100 episodes, a copy of \\(Q^{*}_{s}\\) and of \\(Q_{s, a}\\) is stored in a list, as well as the average reward over this episode, as well as the final \\(Q_{s,a}\\) table, and \\(N_{s,a}\\) that kept track of how often each state-action was chosen. The dill package is used to store these datastructures on disk to avoid the need to rerun the algorithm every time the notebook is run.\n# K / N + K decay learning rate schedule # fully random policy plot_every = 100 n_episodes = len(epsilon_schedule) fullrun = 0 random.seed(123) np.random.seed(123) if fullrun == 1: Q_sarsamax, N_sarsamax, avg_scores, Qlist, Qtable_list = q_learning(env, num_episodes = n_episodes, \\ eps_schedule = epsilon_schedule,\\ alpha = 0.1, \\ gamma = 0.95, \\ plot_every = plot_every, \\ verbose = True, log_full = True) with open(\u0026#39;cached/es1_Q_sarsamax.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Q_sarsamax, f) with open(\u0026#39;cached/es1_avg_scores.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(avg_scores, f) with open(\u0026#39;cached/es1_Qlist.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Qlist, f) with open(\u0026#39;cached/es1_Qtable_list.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Qtable_list, f) else: with open(\u0026#39;cached/es1_Q_sarsamax.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Q_sarsamax = dill.load(f) with open(\u0026#39;cached/es1_avg_scores.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: avg_scores = dill.load(f) with open(\u0026#39;cached/es1_Qlist.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Qlist = dill.load(f) with open(\u0026#39;cached/es1_Qtable_list.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Qtable_list = dill.load(f) Q_es1_lasttable = [np.max(Q_sarsamax[key]) if key in Q_sarsamax \\ else 0 for key in np.arange(env.nS)] Lets plot the learning curve. Here plotnine, a ggplot clone in Python comes in handy.\nAs we can see below, the “recipe” for solving FrozenLake has worked really well. The displayed red line gives the theoretical optimal performance for gamma = 0.95, I used a loess smoother so we can more easily compare the Q-learning results with the theoretical optimum.\nWe can see that the Q-learning algorithm has indeed found a policy that performs optimal. This appears to happen at around 60.000 episodes. We return to this later.\n# plot performance df_scores = pd.DataFrame( {\u0026#39;episode_nr\u0026#39;: np.linspace(0,n_episodes,len(avg_scores),endpoint=False), \u0026#39;avg_score\u0026#39;: np.asarray(avg_scores)}) (p9.ggplot(data = df_scores.loc[df_scores.episode_nr \u0026gt; -1], mapping = p9.aes(x = \u0026#39;episode_nr\u0026#39;, y = \u0026#39;avg_score\u0026#39;)) + p9.geom_point(colour = \u0026#39;gray\u0026#39;) + p9.geom_smooth(method = \u0026#39;loess\u0026#39;) + p9.geom_hline(yintercept = 0.781, colour = \u0026quot;red\u0026quot;) + p9.geom_vline(xintercept = 60_000, color = \u0026quot;blue\u0026quot;))  But now comes the big question: did the \\(Q^{*}_{a}\\) estimates converge onto the true values as well?\nq_showdown = pd.DataFrame( {\u0026#39;Q_es1_lasttable\u0026#39;: Q_es1_lasttable, \u0026#39;q_true\u0026#39;: V_pi_dc}) q_showdown[\u0026#39;state\u0026#39;] = range(16) q_showdown = pd.melt(q_showdown, [\u0026#39;state\u0026#39;]) (p9.ggplot(data = q_showdown, mapping = p9.aes(x = \u0026#39;state\u0026#39;, y = \u0026#39;value\u0026#39;, color = \u0026#39;factor(variable)\u0026#39;)) + p9.geom_point(size = 5, shape = \u0026#39;x\u0026#39;)) Nope, they did not. Ok, most learned Q-values are close to their true values, but they clearly did not converge exactly to their true value.\n Plotting the learning curves for all the state-action values To really understand what is going on, I found it helpful to plot the learning curves for all the 16 x 4 = 64 state-action values at the same time. Here plotnine really shines. I leave out the actual estimates, and only plot a loess smoothed curve for each of the state-action values over time.\n# convert to pandas df dfm = list_of_tables_to_df(Qtable_list) #10 s (p9.ggplot(data = dfm.loc[(dfm.episode \u0026gt; -1)], mapping = p9.aes(x = \u0026#39;episode\u0026#39;, y = \u0026#39;value\u0026#39;, group = \u0026#39;action\u0026#39;, color = \u0026#39;factor(action)\u0026#39;)) #+ p9.geom_point(shape = \u0026#39;x\u0026#39;) + p9.geom_smooth(method = \u0026#39;loess\u0026#39;) + p9.geom_hline(data = df_true, mapping = p9.aes(yintercept = \u0026#39;value\u0026#39;), color = \u0026#39;red\u0026#39;) + p9.geom_vline(xintercept = 600, color = \u0026#39;blue\u0026#39;) + p9.facet_wrap(\u0026quot;variable\u0026quot;, ncol = 4) + p9.theme(subplots_adjust={\u0026#39;wspace\u0026#39;:0.4}) # fix a displaying issue ) First the main question: what about convergence of \\(Q^{*}_{a}\\)? For this we need only to look, for each state, at the action with the highest value, and compare that to the true value (red horizontal lines). Most of the values appear to have converged to a value close to the true value, but Q3 is clearly still way off. Note that we using smoothing here to average out the fluctuations around the true value.\nWe noted earlier that at around episode 60.000, the optimal policy emerges and the learning curve becomes flat. Now, the most obvious reason why performance increases is because the value of \\(\\epsilon\\) is decaying, so the deleterious effects of exploration should go down, and performance should go up.\nAnother reason that performance goes up could be that the greedy policy is improving. It is interesting to examine whether at this point, meaningfull changes in the greedy policy still occur. Meaningfull changes in policy are caused by changes in the estimated state-action values. For example, we might expect two or more state-action value lines crossing, with the “right” action becoming dominant over the “wrong” action. Is this indeed the case?\nIndeed, from the plot above, with the change point at around episode 600 (x 100),a change occurs in Q6, where the actions 0 and 2 cross. However, from the true Q-value table (not shown) we see that both actions are equally rewarding, so the crossing has no effect on performance. Note that only one of the two converges to the true value, because the exploration rate becomes so low that learning for the other action almost completely stops in the end.\nlets zoom in then at the states that have low expected reward, Q0, Q1, Q2, and Q3. These are difficult to examine in the plot above, and have actions with expected rewards that are similar and therefore more difficult to resolve (BUT: since the difference in expected reward is small, the effect of resolving them on the overall performance is small as well). For these we plot the actual state-actions values:\n(p9.ggplot(data = dfm[dfm.variable.isin([\u0026#39;Q0\u0026#39;, \u0026#39;Q1\u0026#39;,\u0026#39;Q2\u0026#39;, \u0026#39;Q3\u0026#39;])], mapping = p9.aes(x = \u0026#39;episode\u0026#39;, y = \u0026#39;value\u0026#39;, group = \u0026#39;action\u0026#39;, color = \u0026#39;factor(action)\u0026#39;)) + p9.geom_point(shape = \u0026#39;x\u0026#39;) #+ p9.geom_smooth(method = \u0026#39;loess\u0026#39;) + p9.geom_hline(data = df_true[df_true.variable.isin([\u0026#39;Q0\u0026#39;, \u0026#39;Q1\u0026#39;,\u0026#39;Q2\u0026#39;, \u0026#39;Q3\u0026#39;])], mapping = p9.aes(yintercept = \u0026#39;value\u0026#39;), color = \u0026#39;red\u0026#39;) + p9.geom_vline(xintercept = 600, color = \u0026#39;blue\u0026#39;) + p9.facet_wrap(\u0026quot;variable\u0026quot;, scales = \u0026#39;free_y\u0026#39;) + p9.theme(subplots_adjust={\u0026#39;wspace\u0026#39;:0.15}) ) From Q1, Q2 and Q3, we can see that exploration really goes down at around episode 500 (x 100) (\\(\\epsilon\\) at this point is 0.007), and with the optimal action standing out already long before reaching this point.\nOnly with Q2 there is a portion of the learning curve where action 1 has the highest value, and is chosen for quite some time before switching back to action 0 again at around episode 60.000. Let’s compare with the true values for Q2:\nQ_perfect[2] array([0.15347714, 0.14684971, 0.14644451, 0.13958106]) Indeed, the difference in expected reward between the actions in state 2 is really small, and because of the increasingly greedy action selection, only action 0 converges to its true values, with the other values “frozen” in place because of the low exploration rate.\nNow, after analyzing what happens if we apply the “cookbook” approach to solving problems using RL, let’s change our attention to getting convergence for preferably ALL the state-action values.\n Q-learning: Theoretical sufficient conditions for convergence According to our RL bible (Sutton \u0026amp; Barto), to obtain exact convergence, we need two conditions to hold.\n The first is that all states continue to be visited, and the second is that the learning rate goes to zero.  Continuous exploration: visiting all the states The nice thing of Q-learning is that it is an off-policy learning algorithm. This means that no matter what the actual policy is used to explore the states, the Q-values we learn correspond to the expected reward when following the optimal policy. Which is quite miraculous if you ask me.\nNow, our (admittedly, a bit academic) goal is getting all of the learned state values as close as possible to the true values. An epsilon-greedy policy with a low \\(epsilon\\) would spent a lot of time by choosing state-actions that are on the optimal path between start and goal state, and would only rarely visit low value states, or choose low value state-actions.\nBecause we can choose any policy we like, I chose a completely random policy. This way, the Agent is more likely to end up in low value states and estimate the Q-values of those state-actions accurately as well.\nNote that since theFrozen Lake enviroment has a lot of inherent randomness already because of the ice being slippery, a policy with a low \\(\\epsilon\\) (most of the time exploiting and only rarely exploring) will still bring the agent in low values states, but this would require much more episodes.\n Convergence and learning rate schedules For a particular constant learning rate, provided that it is not too high, the estimated Q-values will converge to a situation where they start to fluctuate around their true values. If we subsequently lower the learning rate, the scale of the fluctuations (their variance) will decrease. If the learning rate is gradually decayed to zero, the estimates will converge. According to Sutton \u0026amp; Barto (2018), the decay schedule of \\(\\alpha\\) must obey two constraints to assure convergence: (p 33).\n sum of increments must go to infinity sum of the square of increments must go to zero  On the interwebs, I found two formulas that are often used to decay hyperparameters of Reinforcement Learning algorithms:\n\\(\\alpha_n = K / (K + n)\\) (Eq. 1)\n\\(\\alpha_n = \\Sigma^{\\infty}_{n = 1} \\delta^n \\alpha_0\\) (Eq. 2)\nAgain, just as with the decay schedule for \\(\\epsilon\\), it is helpful to visualize the decay schedules to check that they are reasonable before we start to use them with our Q-learning algorithm.\n# Eq 1 def create_alpha_schedule(num_episodes, \\ alpha_K = 100, alpha_min = 1e-3): x = np.arange(num_episodes)+1 y = np.maximum(alpha_K/(x + alpha_K), alpha_min) return y # Eq 2 def create_alpha_schedule2(num_episodes, \\ alpha_start=1.0, alpha_decay=.999, alpha_min=1e-3): x = np.arange(num_episodes)+1 y = np.full(num_episodes, alpha_start) y = np.maximum((alpha_decay**x)*alpha_start, alpha_min) return y  I played a bit with the shape parameter to get a curve with the “elbow” around 20% of the episodes.\nalpha_schedule = create_alpha_schedule(num_episodes = 500_000, \\ alpha_K = 5_000) plot_schedule(alpha_schedule, ylab = \u0026#39;Alpha\u0026#39;)  round(min(alpha_schedule), 3) 0.01 This curve decays \\(\\alpha\\) in 500.000 episodes to 0.01.\nThe second formula (Equation 2) decays \\(\\alpha\\) even further, to 0.001:\nalpha_schedule2 = create_alpha_schedule2(num_episodes = 500_000, \\ alpha_decay = 0.99997) plot_schedule(alpha_schedule2, ylab = \u0026#39;Alpha\u0026#39;) min(alpha_schedule2) 0.001   Running the Q-learning algorithm for different learning rate schedules We start with the decay function that follows Equation 1. To get a full random policy, we set \\(\\epsilon = 1\\). Note that this gives awful performance where the learning curve suggests it is hardly learning anything at all. However, wait until we try out a fully exploiting policy on the Q-value table learned during this run!\n# K / N + K decay learning rate schedule # fully random policy plot_every = 100 alpha_schedule = create_alpha_schedule(num_episodes = 500_000, \\ alpha_K = 5_000) n_episodes = len(alpha_schedule) fullrun = 0 if fullrun == 1: Q_sarsamax, N_sarsamax, avg_scores, Qlist = q_learning(env, num_episodes = n_episodes, \\ eps = 1,\\ alpha_schedule = alpha_schedule, \\ gamma = 0.95, \\ plot_every = plot_every, \\ verbose = True) with open(\u0026#39;cached/as1_Q_sarsamax.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Q_sarsamax, f) with open(\u0026#39;cached/as1_avg_scores.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(avg_scores, f) with open(\u0026#39;cached/as1_Qlist.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Qlist, f) else: with open(\u0026#39;cached/as1_Q_sarsamax.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Q_sarsamax = dill.load(f) with open(\u0026#39;cached/as1_avg_scores.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: avg_scores = dill.load(f) with open(\u0026#39;cached/as1_Qlist.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Qlist = dill.load(f) Q_as1_lasttable = [np.max(Q_sarsamax[key]) if key in Q_sarsamax \\ else 0 for key in np.arange(env.nS)] Here is the learning curve for this run of Q-learning:\n# plot performance plt.plot(np.linspace(0,n_episodes,len(avg_scores),endpoint=False), np.asarray(avg_scores)) plt.xlabel(\u0026#39;Episode Number\u0026#39;) plt.ylabel(\u0026#39;Average Reward (Over Next %d Episodes)\u0026#39; % plot_every) plt.show() print((\u0026#39;Best Average Reward over %d Episodes: \u0026#39; % plot_every), np.max(avg_scores))  Best Average Reward over 100 Episodes: 0.08 Pretty awfull huh? Now let us check out the performance of the learned Q-table:\nfullrun = 0 runs = 100 if fullrun == 1: d_q = [] for i in range(runs): avg_scores = test_performance(Q_sarsamax, env, num_episodes = 1000, \\ plot_every = 1000, verbose = False) d_q.append({\u0026#39;run\u0026#39;: i, \u0026#39;avg_score\u0026#39;: np.mean(avg_scores)}) print(\u0026quot;\\ri = {}/{}\u0026quot;.format(i+1, runs), end=\u0026quot;\u0026quot;) sys.stdout.flush() d_qlearn = pd.DataFrame(d_q) d_qlearn.to_pickle(\u0026#39;cached/scores_qlearn_0.95.pkl\u0026#39;) else: d_qlearn = pd.read_pickle(\u0026#39;cached/scores_qlearn_0.95.pkl\u0026#39;) round(np.mean(d_qlearn.avg_score), 3) 0.778 Bam! Equal to the performance of the optimal policy found using Dynamic programming (sampling error (2x SD) is +/- 0.008). The random policy has actual learned Q-values that for a greedy policy result in optimal performance!\nBut what about convergence? Ok, so Q-learning found an optimal policy. But did it converge? Our q_learning() function made a list of Q-tables while learning, adding a new table every 100 episodes. This gives us 5.000 datapoints for each Q-value, which we can plot to visually check for convergence.\nAs with the list of state-action tables above, It takes some datawrangling to get the list of Q-tables in a nice long pandas DataFrame suitable for plotting. This is hidden away in the list_to_df() function.\n# 13s dfm = list_to_df(Qlist) #10 s (p9.ggplot(data = dfm.loc[(dfm.episode \u0026gt; -1)], mapping = p9.aes(x = \u0026#39;episode\u0026#39;, y = \u0026#39;value\u0026#39;)) + p9.geom_point() + p9.geom_smooth(method = \u0026quot;loess\u0026quot;, color = \u0026quot;yellow\u0026quot;) + p9.geom_hline(data = df_true, mapping = p9.aes(yintercept = \u0026#39;value\u0026#39;), color = \u0026#39;red\u0026#39;) + p9.facet_wrap(\u0026quot;variable\u0026quot;, scales = \u0026#39;free_y\u0026#39;) + p9.theme(subplots_adjust={\u0026#39;wspace\u0026#39;:0.4}) # fix plotting issue ) This looks good, lets zoom in at one of the more noisier Q-values, Q14. In the learning schedule used, the lowest value for \\(\\alpha\\) is 0.01. At this value of the learning rate, there is still considerable variation around the true value.\n(p9.ggplot(data = dfm.loc[(dfm.variable == \u0026#39;Q10\u0026#39;) \u0026amp; (dfm.episode \u0026gt; -1)], mapping = p9.aes(x = \u0026#39;episode\u0026#39;, y = \u0026#39;value\u0026#39;)) + p9.geom_point() + p9.geom_smooth(method = \u0026quot;loess\u0026quot;, color = \u0026quot;yellow\u0026quot;) + p9.geom_hline(data = df_true[df_true.variable == \u0026#39;Q10\u0026#39;], mapping = p9.aes(yintercept = \u0026#39;value\u0026#39;), color = \u0026#39;red\u0026#39;) ) Suppose we did not know the true value of Q(S = 14), and wanted to estimate it using Q-learning. From the plot above, an obvious strategy is to average all the values in the tail of the learning rate schedule, say after episode 400.000.\n# drop burn-in, then average Q-vals by variable Q_est = (dfm.loc[dfm.episode \u0026gt; 4000] .groupby([\u0026#39;variable\u0026#39;]) .mean() ) # convert to a 1D array sorted by Q-value Q_est[\u0026#39;sort_order\u0026#39;] = [int(str.replace(x, \u0026#39;Q\u0026#39;, \u0026#39;\u0026#39;)) \\ for x in Q_est.index.values] Q_est = Q_est.sort_values(by=[\u0026#39;sort_order\u0026#39;]) Q_est_as1 = Q_est[\u0026#39;value\u0026#39;].values  Lets compare these with the final estimated values, and with true values:\nQ_as1_lasttable = [np.max(Q_sarsamax[key]) if key in Q_sarsamax \\ else 0 for key in np.arange(env.nS)] q_showdown = pd.DataFrame( {\u0026#39;q_est_as1\u0026#39;: Q_est_as1, \u0026#39;q_est_as1_lasttable\u0026#39;: Q_as1_lasttable, \u0026#39;q_true\u0026#39;: V_pi_dc}) q_showdown[\u0026#39;state\u0026#39;] = range(16) q_showdown = pd.melt(q_showdown, [\u0026#39;state\u0026#39;]) (p9.ggplot(data = q_showdown, mapping = p9.aes(x = \u0026#39;state\u0026#39;, y = \u0026#39;value\u0026#39;, color = \u0026#39;factor(variable)\u0026#39;)) + p9.geom_point(size = 5, shape = \u0026#39;x\u0026#39;)) Pretty close! So here we see Q-learning finally delivering on its convergence promise.\nAnd what about final values vs averaging? Averaging seems to have improved the estimates a bit. Note that we had to choose an averaging window based on eyeballing the learning curves for the separate Q-values.\nCan we do even better? A learning rate schedule where alpha is lowered further would diminish the fluctuations around the true values, but at the risk of lowering it too fast and effectively freezing (or very slowly evolving) the Q-values at non-equilibrium values.\n  decay learning rate schedule variant II The second formula decays \\(\\alpha\\) to 0.001, ten times lower than the previous decay schedule:\n# fully random policy plot_every = 100 alpha_schedule2 = create_alpha_schedule2(num_episodes = 500_000, \\ alpha_decay = 0.99997) n_episodes = len(alpha_schedule2) fullrun = 0 if fullrun == 1: Q_sarsamax, N_sarsamax, avg_scores, Qlist = q_learning(env, num_episodes = n_episodes, \\ eps = 1,\\ alpha_schedule = alpha_schedule2, \\ gamma = 0.95, \\ plot_every = plot_every, \\ verbose = True) with open(\u0026#39;cached/as2_Q_sarsamax.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Q_sarsamax, f) with open(\u0026#39;cached/as2_avg_scores.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(avg_scores, f) with open(\u0026#39;cached/as2_Qlist.pkl\u0026#39;, \u0026#39;wb\u0026#39;) as f: dill.dump(Qlist, f) else: with open(\u0026#39;cached/as2_Q_sarsamax.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Q_sarsamax = dill.load(f) with open(\u0026#39;cached/as2_avg_scores.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: avg_scores = dill.load(f) with open(\u0026#39;cached/as2_Qlist.pkl\u0026#39;, \u0026#39;rb\u0026#39;) as f: Qlist = dill.load(f)  dfm = list_to_df(Qlist) (p9.ggplot(data = dfm.loc[(dfm.episode \u0026gt; -1)], mapping = p9.aes(x = \u0026#39;episode\u0026#39;, y = \u0026#39;value\u0026#39;)) + p9.geom_point() + p9.geom_smooth(method = \u0026quot;loess\u0026quot;, color = \u0026quot;yellow\u0026quot;) + p9.geom_hline(data = df_true, mapping = p9.aes(yintercept = \u0026#39;value\u0026#39;), color = \u0026#39;red\u0026#39;) + p9.facet_wrap(\u0026quot;variable\u0026quot;, scales = \u0026#39;free_y\u0026#39;) + p9.theme(subplots_adjust={\u0026#39;wspace\u0026#39;:0.4}) ) Cleary, the fluctuations are reduced compared to the previous schedule. AND all Q-values still fluctuate around their true values, so it seems that this schedule is better with respect to finding the true values.\nLet’s see if the accuracy of the estimated Q-values is indeed higher:\n# drop burn-in, then average Q-vals by variable Q_est = (dfm.loc[dfm.episode \u0026gt; 2000] .groupby([\u0026#39;variable\u0026#39;]) .mean() ) # convert to 1d array sorted by state nr Q_est[\u0026#39;sort_order\u0026#39;] = [int(str.replace(x, \u0026#39;Q\u0026#39;, \u0026#39;\u0026#39;)) \\ for x in Q_est.index.values] Q_est = Q_est.sort_values(by=[\u0026#39;sort_order\u0026#39;]) Q_est_as2 = Q_est[\u0026#39;value\u0026#39;].values Q_as2_lasttable = [np.max(Q_sarsamax[key]) if key in Q_sarsamax \\ else 0 for key in np.arange(env.nS)] q_showdown = pd.DataFrame( {\u0026#39;Q_as2_lasttable\u0026#39;: Q_as2_lasttable, \u0026#39;q_est_as2\u0026#39;: Q_est_as2, \u0026#39;q_true\u0026#39;: V_pi_dc}) q_showdown[\u0026#39;state\u0026#39;] = range(16) q_showdown = pd.melt(q_showdown, [\u0026#39;state\u0026#39;]) (p9.ggplot(data = q_showdown, mapping = p9.aes(x = \u0026#39;state\u0026#39;, y = \u0026#39;value\u0026#39;, color = \u0026#39;factor(variable)\u0026#39;)) + p9.geom_point(size = 5, shape = \u0026#39;x\u0026#39;)) Boom! Now our \\(Q^{*}_{a}\\) estimates are really getting close to the true values. Clearly, the second learning rate schedule is able to learn the true Q-values compared to the first rate schedule, given the fixed amount of computation, in this case 500.000 episodes each.\nAveraging out does not do much anymore, except for states 10 and 14, where it improves the estimates a tiny bit.\n Wrapping up In conclusion, we have seen that the common approach of using Q-learning with a constant learning rate and gradually decreasing the exploration rate, given sensible values and rates, will indeed find the optimal policy. However, this approach does not necessary converge to the true state-values. We have to tune the algorithm exactly the other way around: keep the exploration rate constant and sufficiently high, and decay the learning rate. For sufficiently low learning rates, averaging out the fluctuations does not meaningfully increase accuracy of the learned Q-values.\n ","date":1615075200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615075200,"objectID":"b75ad1a05694420ae9e68ed6fadc2c14","permalink":"/post/frozenlake-qlearning-convergence/","publishdate":"2021-03-07T00:00:00Z","relpermalink":"/post/frozenlake-qlearning-convergence/","section":"post","summary":"This blog post concerns a famous toy problem in Reinforcement Learning, the [FrozenLake environment](https://gym.openai.com/envs/FrozenLake-v0/). We compare solving an environment with RL by reaching **maximum performance** versus obtaining the **true state-action values** $Q_{s,a}$.","tags":["Reinforcement learning","Python","OpenAI Gym","AI"],"title":"OpenAI Gym's FrozenLake: Converging on the true Q-values","type":"post"},{"authors":null,"categories":["Machine Learning"],"content":"  This blogpost is about reinforcement learning, part of the Machine Learning (ML) / AI family of computer algorithms and techniques. Reinforcement learning is all about agents taking decisions in complex environments. The decisions (actions) take the agent from a current state or situation, to a new state. When the probability of ending up in a new state is only dependent on the current state and the action the agent takes in that state, we are facing a so-called Markov Decision Problem, or MDP for short.\nBack in 2016, people at OpenAI, a startup company that specializes in AI/ML, created a Python library called Gym that provides standardized access to a range of MDP environments. Using Gym means keeping a sharp separation between the RL algorithm (“The agent”) and the environment (or task) it tries to solve / optimize / control / achieve. Gym allows us to easily benchmark RL algorithms on a range of different environments. It also allows us to more easily build on others work, and share our own work (i.e. on Github). Because when I implement something as a Gym Environment, others can then immediately apply their algorithms on it, and vice versa.\nIn this blogpost, we solve a famous decision problem called “Jack’s Car Rental” by first turning it into a Gym environment and then use a RL algorithm called “Policy Iteration” (a form of “Dynamic Programming”) to solve for the optimal decisions to take in this environment.\nThe Gym environment for Jack’s Car Rental is called gym_jcr and can be installed from https://github.com/gsverhoeven/gym_jcr.\nJack’s Car Rental problem Learning Reinforcement learning (RL) as a student, means working through the famous book on RL by Sutton and Barto. In chapter 4, Example 4.2 (2018 edition), Jack’s Car Rental problem is presented:\nJack’s Car Rental Jack manages two locations for a nationwide car rental company. Each day, some number of customers arrive at each location to rent cars. If Jack has a car available, he rents it out and is credited $10 by the national company. If he is out of cars at that location, then the business is lost. Cars become available for renting the day after they are returned. To help ensure that cars are available where they are needed, Jack can move them between the two locations overnight, at a cost of $2 per car moved. We assume that the number of cars requested and returned at each location are Poisson random variables. Suppose Lambda is 3 and 4 for rental requests at the first and second locations and 3 and 2 for returns. To simplify the problem slightly, we assume that there can be no more than 20 cars at each location (any additional cars are returned to the nationwide company, and thus disappear from the problem) and a maximum of five cars can be moved from one location to the other in one night. We take the discount rate to be gamma = 0.9 and formulate this as a continuing finite MDP, where the time steps are days, the state is the number of cars at each location at the end of the day, and the actions are the net numbers of cars moved between the two locations overnight. In order to implement this MDP in Gym and solving it using DP (Dynamic Programming), we need to calculate for each state - action combination the probability of transitioning to all other states. Here a state is defined as the number of cars at the two locations A and B. Since there can be between 0 and 20 cars at each location, we have in total 21 x 21 = 441 states. We have 11 actions, moving up to five cars from A to B, moving up to five cars from B to A, or moving no cars at all. We also need the rewards R for taking action \\(a\\) in state \\(s\\).\nLuckily for us, Christian Herta and Patrick Baumann, as part of their project “Deep.Teaching”, created a Jupyter Notebook containing a well explained Python code solution for calculating P, and R, and published it as open source under the MIT license. I extracted their functions and put them in jcr_mdp.py, containing two top level functions create_P_matrix() and create_R_matrix(), these are used when the Gym environment is initialized.\n JacksCarRentalEnv My approach to creating the Gym environment for Jack’s Car Rental was to take the Frozen Lake Gym environment, and rework it to become JacksCarRentalEnv. I chose this environment because it has a similar structure as JCR, having discrete states and discrete actions. In addition, it is one of the few environments that create and expose the complete transition matrix P needed for the DP algorithm.\nThere is actually not much to it at this point, as most functionality is provided by the DiscreteEnv class that our environment builds on. We need only to specify four objects:\n nS: number of states nA: number of actions P: transitions isd: initial state distribution (list or array of length nS)  nS and nA were already discussed above, there are 441 and 11 respectively. For the isd we simply choose an equal probability to start in any of the 441 states.\nThis leaves us with the transitions P. This needs to be in a particular format, a dictionary dict of dicts of lists, where P[s][a] == [(probability, nextstate, reward, done), ...] according to the help of this class. So we take the P and R arrays created by the python code in jcr_mdp.py and use these to fill the dictionary in the proper way (drawing inspiration from the Frozen Lake P object :)).\nP = {s : {a : [] for a in range(nA)} for s in range(nS)} # prob, next_state, reward, done for s in range(nS): # need a state vec to extract correct probs from Ptrans state_vec = np.zeros(nS) state_vec[s] = 1 for a in range(nA): prob_vec = np.dot(Ptrans[:,:,a], state_vec) li = P[s][a] # add rewards for all transitions for ns in range(nS): li.append((prob_vec[ns], ns, R[s][a], False)) And were done! Let’s try it out.\nimport matplotlib.pyplot as plt import numpy as np import pickle # Gym environment import gym import gym_jcr # RL algorithm from dp import * # n.b. can take up to 15 s env = gym.make(\u0026quot;JacksCarRentalEnv-v0\u0026quot;)  So what we have?\n# print the state space and action space print(env.observation_space) print(env.action_space) # print the total number of states and actions print(env.nS) print(env.nA) Discrete(441) Discrete(11) 441 11 Let us check for state s= 0, for each action a, if the probabilities of transitioning to a new state new_state sum to one (we need to end up somewhere right?).\n# from state 0, for each action the probs for going to new state s = 0 for a in range(env.nA): prob = 0.0 for new_state in range(env.nS): prob += env.P[s][a][new_state][0] print(prob, end = \u0026#39; \u0026#39;) 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992 0.9999999999999992  Close enough. Let’s run our Dynamic Programming algorithm on it!\n Policy iteration on JCR The policy_iteration() function used below is from dp.py. This exact same code was used in a Jupyter tutorial notebook to solve the Frozen-Lake Gym environment.\nWe reproduce the results from the Sutton \u0026amp; Barto book (p81), where the algorithm converges after four iterations. This takes about 30 min on my computer.\nfullrun = False if fullrun == True: policy, V = policy_iteration(env, gamma = 0.9) with open(\u0026#39;policy.bin\u0026#39;, \u0026#39;wb\u0026#39;) as f: pickle.dump(policy, f) with open(\u0026#39;values.bin\u0026#39;, \u0026#39;wb\u0026#39;) as f: pickle.dump(V, f) else: with open(\u0026#39;policy.bin\u0026#39;, \u0026#39;rb\u0026#39;) as f: policy = pickle.load(f) with open(\u0026#39;values.bin\u0026#39;, \u0026#39;rb\u0026#39;) as f: V = pickle.load(f)  Plot optimal policy as a contour map For easy plotting, we need to transform the policy from a 2d state-action matrix to a 2d state-A, state-B matrix with the action values in the cells.\nMAX_CARS = 20 def get_state_vector(a, b): s = np.zeros((MAX_CARS+1)**2) s[a*(MAX_CARS+1)+b] = 1 return s policy_map = np.zeros([MAX_CARS+1, MAX_CARS+1]) for a in range(MAX_CARS+1): for b in range(MAX_CARS+1): state = get_state_vector(a, b) s = state.argmax() policy_map[a, b] = np.argmax(policy[s,:]) - 5 We visualize the optimal policy as a 2d heatmap using matplotlib.pyplot.imshow().\nplt.figure(figsize=(7,6)) hmap = plt.imshow(policy_map, cmap=\u0026#39;viridis\u0026#39;, origin=\u0026#39;lower\u0026#39;) cbar = plt.colorbar(hmap) cbar.ax.set_ylabel(\u0026#39;actions\u0026#39;) plt.title(\u0026#39;Policy\u0026#39;) plt.xlabel(\u0026quot;cars at B\u0026quot;) plt.ylabel(\u0026quot;cars at A\u0026quot;) Optimal policy for all states of Jack’s Car Rental\n  Conclusion and outlook Conclusion: yes we can turn JCR into a Gym environment and solve it using the exact same (policy iteration) code that I had earlier used to solve the Frozen-Lake Gym environment!\nSo now what? One obvious area of improvement is speed: It takes too long to load the environment. Also the DP algorithm is slow, because it uses for loops instead of matrix operations.\nAnother thing is that currently the rewards that the environment returns are average expected rewards that are received when taking action a in state s . However, they do not match the actual amount of cars rented when transitioning from a particular state s to a new state s’.\nFinally, adding the modifications to the problem from Exercise 4.7 in Sutton \u0026amp; Barto could also be implemented, but this complicates the calculation of P and R even further. For me, this is the real takeaway from this exercise: it is really hard to (correctly) compute the complete set of transition probabilities and rewards for an MDP, but it is much easier if we just need to simulate single transitions according to the MDP specification. Wikipedia has a nice paragraph on it under simulator models for MDPs.\n ","date":1609286400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609286400,"objectID":"28b0542d5000c39acff562a4293685f0","permalink":"/post/jacks-car-rental-gym/","publishdate":"2020-12-30T00:00:00Z","relpermalink":"/post/jacks-car-rental-gym/","section":"post","summary":"In this blogpost, we solve a famous sequential decision problem called Jacks Car Rental by first turning it into a Gym environment and then use a RL algorithm called Policy Iteration (a form of Dynamic Programming) to solve for the optimal decisions to take in this environment.","tags":["Reinforcement learning","Python","OpenAI Gym","AI"],"title":"Jacks Car Rental as a Gym Environment","type":"post"},{"authors":null,"categories":["Statistics"],"content":"  Gertjan Verhoeven \u0026amp; Misja Mikkers Here we show how to use Stan with the brms R-package to calculate the posterior predictive distribution of a covariate-adjusted average treatment effect. We fit a model on simulated data that mimics a (very clean) experiment with random treatment assignment.\nIntroduction Suppose we have data from a Randomized Controlled Trial (RCT) and we want to estimate the average treatment effect (ATE). Patients get treated, or not, depending only on a coin flip. This is encoded in the Treatment variable. The outcome is a count variable Admissions, representing the number of times the patient gets admitted to the hospital. The treatment is expected to reduce the number of hospital admissions for patients.\nTo complicate matters (a bit): As is often the case with patients, not all patients are identical. Suppose that older patients have on average more Admissions. So Age is a covariate.\n Average treatment effect (ATE) Now, after we fitted a model to the data, we want to actually use our model to answer \u0026quot;What-if\u0026quot; questions (counterfactuals). Here we answer the following question:\n What would the average reduction in Admissions be if we had treated ALL the patients in the sample, compared to a situation where NO patient in the sample would have received treatment?  Well, that is easy, we just take the fitted model, change treatment from zero to one for each, and observe the (\u0026quot;marginal\u0026quot;) effect on the outcome, right?\nYes, but the uncertainty is harder. We have uncertainty in the estimated coefficients of the intercept and covariate, as well as in the coefficient of the treatment variable. And these uncertainties can be correlated (for example between the coefficients of intercept and covariate).\nHere we show how to use posterior_predict() to simulate outcomes of the model using the sampled parameters. If we do this for two counterfactuals, all patients treated, and all patients untreated, and subtract these, we can easily calculate the posterior predictive distribution of the average treatment effect.\nLet's do it!\n Load packages This tutorial uses brms, a user friendly interface to full Bayesian modelling with Stan.\nlibrary(tidyverse) library(rstan) library(brms)   Data simulation We generate fake data that matches our problem setup.\nAdmissions are determined by patient Age, whether the patient has Treatment, and some random Noise to capture unobserved effects that influence Admissions. We exponentiate them to always get a positive number, and plug it in the Poisson distribution using rpois().\nset.seed(123) id \u0026lt;- 1:200 n_obs \u0026lt;- length(id) b_tr \u0026lt;- -0.7 b_age \u0026lt;- 0.1 df_sim \u0026lt;- as.data.frame(id) %\u0026gt;% mutate(Age = rgamma(n_obs, shape = 5, scale = 2)) %\u0026gt;% # positive cont predictor mutate(Noise = rnorm(n_obs, mean = 0, sd = 0.5)) %\u0026gt;% # add noise mutate(Treatment = ifelse(runif(n_obs) \u0026lt; 0.5, 0, 1)) %\u0026gt;% # Flip a coin for treatment mutate(Lambda = exp(b_age * Age + b_tr * Treatment + Noise)) %\u0026gt;% # generate lambda for the poisson dist mutate(Admissions = rpois(n_obs, lambda = Lambda))  Summarize data Ok, so what does our dataset look like?\nsummary(df_sim) ## id Age Noise Treatment ## Min. : 1.00 Min. : 1.794 Min. :-1.32157 Min. :0.000 ## 1st Qu.: 50.75 1st Qu.: 6.724 1st Qu.:-0.28614 1st Qu.:0.000 ## Median :100.50 Median : 8.791 Median : 0.04713 Median :0.000 ## Mean :100.50 Mean : 9.474 Mean : 0.02427 Mean :0.495 ## 3rd Qu.:150.25 3rd Qu.:11.713 3rd Qu.: 0.36025 3rd Qu.:1.000 ## Max. :200.00 Max. :24.835 Max. : 1.28573 Max. :1.000 ## Lambda Admissions ## Min. : 0.2479 Min. : 0.000 ## 1st Qu.: 1.1431 1st Qu.: 1.000 ## Median : 1.8104 Median : 2.000 ## Mean : 2.6528 Mean : 2.485 ## 3rd Qu.: 3.0960 3rd Qu.: 3.000 ## Max. :37.1296 Max. :38.000 The Treatment variable should reduce admissions. Lets visualize the distribution of Admission values for both treated and untreated patients.\nggplot(data = df_sim, aes(x = Admissions)) + geom_histogram(stat=\u0026quot;count\u0026quot;) + facet_wrap(~ Treatment)  The effect of the treatment on reducing admissions is clearly visible.\nWe can also visualize the relationship between Admissions and Age, for both treated and untreated patients. We use the viridis scales to provide colour maps that are designed to be perceived by viewers with common forms of colour blindness.\nggplot(data = df_sim, aes(x = Age, y = Admissions, color = as.factor(Treatment))) + geom_point() + scale_color_viridis_d(labels = c(\u0026quot;No Treatment\u0026quot;, \u0026quot;Treatment\u0026quot;)) + labs(color = \u0026quot;Treatment\u0026quot;) Now lets fit our Bayesian Poisson regression model to it.\n Fit model We use brms default priors for convenience here. For a real application we would of course put effort into into crafting priors that reflect our current knowledge of the problem at hand.\nmodel1 \u0026lt;- brm( formula = as.integer(Admissions) ~ Age + Treatment, data = df_sim, family = poisson(), warmup = 2000, iter = 5000, cores = 2, chains = 4, seed = 123, silent = TRUE, refresh = 0, ) ## Compiling Stan program... ## Start sampling  Check model fit summary(model1) ## Family: poisson ## Links: mu = log ## Formula: as.integer(Admissions) ~ Age + Treatment ## Data: df_sim (Number of observations: 200) ## Samples: 4 chains, each with iter = 5000; warmup = 2000; thin = 1; ## total post-warmup samples = 12000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## Intercept -0.05 0.12 -0.28 0.18 1.00 7410 7333 ## Age 0.12 0.01 0.10 0.14 1.00 8052 8226 ## Treatment -0.83 0.10 -1.02 -0.63 1.00 7794 7606 ## ## Samples were drawn using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). We see that the posterior dists for \\(\\beta_{Age}\\) and \\(\\beta_{Treatment}\\) cover the true values, so looking good. To get a fuller glimpse into the (correlated) uncertainty of the model parameters we make a pairs plot:\npairs(model1) As expected, the coefficients \\(\\beta_{Intercept}\\) (added by brms) and \\(\\beta_{Age}\\) are highly correlated.\n First attempt: Calculate Individual Treatment effects using the model fit object Conceptually, the simplest approach for prediction is to take the most likely values for all the model parameters, and use these to calculate for each patient an individual treatment effect. This is what plain OLS regression does when we call predict.lm() on a fitted model.\nest_intercept \u0026lt;- fixef(model1, pars = \u0026quot;Intercept\u0026quot;)[,1] est_age_eff \u0026lt;- fixef(model1, pars = \u0026quot;Age\u0026quot;)[,1] est_t \u0026lt;- fixef(model1, pars = \u0026quot;Treatment\u0026quot;)[,1] # brm fit parameters (intercept plus treatment) ites \u0026lt;- exp(est_intercept + (est_age_eff * df_sim$Age) + est_t) - exp(est_intercept + (est_age_eff * df_sim$Age)) ggplot(data.frame(ites), aes(x = ites)) + geom_histogram() + geom_vline(xintercept = mean(ites), col = \u0026quot;red\u0026quot;) + ggtitle(\u0026quot;Effect of treatment on Admissions for each observation\u0026quot;) + expand_limits(x = 0)  Averaging the ITEs gives us the ATE, displayed in red.\nOk, so on average, our treatment reduces the number of Admissions by -1.9.\nYou may wonder: why do we even have a distribution of treatment effects here? Should it not be the same for each patient? Here a peculiarity of the Poisson regression model comes to surface: The effect of changing Treatment from 0 to 1 on the outcome depends on the value of Age of the patient. This is because we exponentiate the linear model before we plug it into the Poisson distribution.\n Next, the uncertainty in the ATE How to get all this underlying, correlated uncertainty in the model parameters, that have varying effects depending on the covariates of patients, and properly propagate that to the ATE? What is the range of plausible values of the ATE consistent with the data \u0026amp; model?\nAt this point, using only the summary statistics of the model fit (i.e. the coefficients), we hit a wall. To make progress we have to work with the full posterior distribution of model parameters, and use this to make predictions. That is why it is often called \u0026quot;the posterior predictive distribution\u0026quot; (Check BDA3 for the full story).\n Posterior predictive distribution (PPD): two tricks Ok, you say, a Posterior Predictive Distribution, let's have it! Where can I get one?\nLuckily for us, most of the work is already done, because we have fitted our model. And thus we have a large collection of parameter draws (or samples, to confuse things a bit). All the correlated uncertainty is contained in these draws.\nThis is the first trick. Conceptually, we imagine that each separate draw of the posterior represents a particular version of our model.\nIn our example model fit, we have 12.000 samples from the posterior. In our imagination, we now have 12.000 versions of our model, where unlikely parameter combinations are present less often compared to likely parameter combinations. The full uncertainty of our model parameters is contained in this \u0026quot;collection of models\u0026quot; .\nThe second trick is that we simulate (generate) predictions for all observations, from each of these 12.000 models. Under the hood, this means computing for each model (we have 12.000), for each observation (we have 200) the predicted lambda value given the covariates, and drawing a single value from a Poisson distribution with that \\(\\Lambda\\) value (e.g. running rpois(n = 1, lambda) ).\nThis gives us a 12.000 x 200 matrix, that we can compute with.\n Computing with the PPD: brms::posterior_predict() To compute PPD's, we can use brms::posterior_predict(). We can feed it any dataset using the newdata argument, and have it generate a PPD.\nFor our application, the computation can be broken down in two steps:\n Step 1: use posterior_predict() on our dataset with Treatment set to zero, do the same for our dataset with Treatment set to one, and subtract the two matrices. This gives us a matrix of outcome differences / treatment effects. Step 2: Averaging over all cols (the N=200 simulated outcomes for each draw) should give us the distribution of the ATE. This distribution now represents the variability (uncertainty) of the estimate.  Ok, step 1:\n# create two versions of our dataset, with all Tr= 0 and all Tr=1 df_sim_t0 \u0026lt;- df_sim %\u0026gt;% mutate(Treatment = 0) df_sim_t1 \u0026lt;- df_sim %\u0026gt;% mutate(Treatment = 1) # simulate the PPDs pp_t0 \u0026lt;- posterior_predict(model1, newdata = df_sim_t0) pp_t1 \u0026lt;- posterior_predict(model1, newdata = df_sim_t1) diff \u0026lt;- pp_t1 - pp_t0 dim(diff) ## [1] 12000 200 And step 2 (averaging by row over the cols):\nATE_per_draw \u0026lt;- apply(diff, 1, mean) # equivalent expression for tidyverse fans #ATE_per_draw \u0026lt;- data.frame(diff) %\u0026gt;% rowwise() %\u0026gt;% summarise(avg = mean(c_across(cols = everything()))) length(ATE_per_draw) ## [1] 12000 Finally, a distribution of plausible ATE values. Oo, that is so nice. Lets visualize it!\nggplot(data.frame(ATE_per_draw), aes(x = ATE_per_draw)) + geom_histogram() + geom_vline(xintercept = mean(ites), col = \u0026quot;red\u0026quot;) + ggtitle(\u0026quot;Posterior distribution of the Average Treatment Effect (ATE)\u0026quot;) We can compare this distribution with the point estimate of the ATE we obtained above using the model coefficients. It sits right in the middle (red line), just as it should be!\n Demonstrating the versatility: uncertainty in the sum of treatment effects Now suppose we are a policy maker, and we want to estimate the total reduction in Admissions if all patients get the treatment. And we want to quantify the range of plausible values of this summary statistic.\nTo do so, we can easily adjust our code to summing instead of averaging all the treatment effects within each draw (i.e. by row):\nTTE_per_draw \u0026lt;- apply(diff, 1, sum) ggplot(data.frame(TTE_per_draw), aes(x = TTE_per_draw)) + geom_histogram() + geom_vline(xintercept = sum(ites), col = \u0026quot;red\u0026quot;) + ggtitle(\u0026quot;Posterior distribution of the Total Treatment Effect (TTE)\u0026quot;) So our model predicts for the aggregate reduction of patient Admissions a value in the range of -500 to -250.\nThis distribution can then be used to answer questions such as \u0026quot;what is the probability that our treatment reduces Admissions by at least 400\u0026quot;?\nTTE \u0026lt;- data.frame(TTE_per_draw) %\u0026gt;% mutate(counter = ifelse(TTE_per_draw \u0026lt; -400, 1, 0)) mean(TTE$counter) * 100 ## [1] 38.1  Take home message: PPD with brms is easy and powerful We hope to have demonstrated that when doing a full bayesian analysis with brms and Stan, it is very easy to create Posterior Predictive Distributions using posterior_predict(). And that if we have a posterior predictive distribution, incorporating uncertainty in various \u0026quot;marginal effects\u0026quot; type analyses becomes dead-easy. These analyses include what-if scenarios using the original data, or scenarios using new data with different covariate distributions (for example if we have an RCT that is enriched in young students, and we want to apply it to the general population). Ok, that it is for today, happy modelling!\n  ","date":1599177600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599177600,"objectID":"3b68b9f9a404fe9174d7e7aaeedfb038","permalink":"/post/posterior-distribution-average-treatment-effect/","publishdate":"2020-09-04T00:00:00Z","relpermalink":"/post/posterior-distribution-average-treatment-effect/","section":"post","summary":"Here we show how to use Stan and the brms R-package to calculate the posterior predictive distribution of a covariate-adjusted average treatment effect (ATE).","tags":["brms","causal inference","bayesian statistics","Stan","rstan"],"title":"Using posterior predictive distributions to get the Average Treatment Effect (ATE) with uncertainty","type":"post"},{"authors":null,"categories":["Machine learning","Deep learning"],"content":"     Introduction I don't change computers often. The fun for me is to make the most out of sparse resources. Linux fits nicely into this philosophy, because it can be adapted to run on really tiny computers (e.g. http://www.picotux.com/), as well as huge supercomputers (https://itsfoss.com/linux-runs-top-supercomputers/). I do like to keep up with new tech developments. And with the commoditization of deep learning in the form of Keras, I felt it was about time that I finally jumped on the Deep Learning bandwagon.\nAnd the nice thing about lagging behind: The choice for deep learning is now extremely simple. I need Keras with TensorFlow as a computational backend. Which nowadays means installing TensorFlow since the Keras API has been incorporated into the TensorFlow project.\n TensorFlow and AVX Then I ran into a problem: TensorFlow is all about FAST computation. And therefore it tries to exploit all hardware features that speed up computation. One obvious way to do so is utilizing specialized hardware such as GPU's and TPU's to do the number crunching. But even for CPU's, TensorFlow likes to make use of all the computational features that modern CPU's offer. One of these is the \u0026quot;Advanced Vector Instruction Set\u0026quot; , aka AVX. As most CPU's from 2011 or later support AVX, the TensorFlow folks decided to only make binaries available that require a CPU with AVX. Bummer for me: as my CPU is from 2010, I needed to compile TensorFlow myself.\nBut come to think of it: What better rite of passage into the Deep Learning AI age is to compile TensorFlow from source on your own machine??? (Opening music of Space Odyssey 2001 in the background)\n Building TensorFlow on a really old computer I followed the tutorial from TensorFlow to build from source on a Linux system (Ubuntu 18.04 LTS). Therefore, these notes are most useful to other Linux users, and my future self of course.\nRoughly this consisted of:\n Creating a virtual environment for Python 3.6.9 Checking my GCC version (7.5.0, which is greater than 7.3 that is used for the official TF packages) Clone the TensorFlow repository from GitHub Git checkout the latest official TensorFlow release (v2.2) Installed the latest release of Bazel (Google's Make program), version 3.1. Then install exactly the right version needed for TF2.2 (2.0.0, as specified by MIN_BAZEL_VERSION in tensorflow/configure.py, use .baselversion to easily install multiple bazel versions side by side)  Then came the hard part, the final step:\n Tweak Bazel arguments endlessly to reduce resource usage to be able to complete the build process succesfully  In the end, I removed the -c opt, so no special optimization for my CPU. And asked for one CPU (I have two cores :-), one job, and max 2GB of RAM usage.\ncd tf_build_env/ source bin/activate cd ~/Github/tensorflow/ bazel build --config=opt --local_ram_resources=2048 --local_cpu_resources=HOST_CPUS-1 --jobs=1 //tensorflow/tools/pip_package:build_pip_package I ran the build process in a terminal on the Ubuntu 18.04 Desktop, without any other programs loaded. My 2010 PC has in total 4 GB of RAM. As the Ubuntu Desktop + OS consumes about 1-1.5 GB on my system, this leaves about 2.5-3.0 GB for bazel. Now as it turns out, according to htop memory consumption went up to 3.6 GB (of my 3.9GB max), but it succeeded in the end. This was after 10 hours of compiling! (I let it run overnight)\nThe final step was to turn the compiled TensorFlow into a Python Wheel package ready to install using pip.\n./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg # creates a \u0026#39;wheel\u0026#39; file called tensorflow-2.2.0-cp36-cp36m-linux_x86_64.whl To try it out, I created a new empty Python 3 virtual environment with only TensorFlow and Jupyter Notebook installed. To my delight it ran the Fashion MNIST classification with Keras example flawlessly.\nAnd even on my ancient PC performance was quite good, training the model took around 1 minute. So, after glorious succes in Python, it was time to move on to R.\n Keras in R with the classic MNIST I had to install the development version of the R package keras from GitHub to fix a bug that prevented Keras in R from working with TF v2.2.\nFrom the release notes: (https://github.com/rstudio/keras/blob/master/NEWS.md)\nFixed issue regarding the KerasMetricsCallback with TF v2.2 (#1020)\ndevtools::install_github(\u0026quot;rstudio/keras\u0026quot;) For my first deep learning in R, I followed the tutorial from https://tensorflow.rstudio.com/tutorials/beginners/\nFirst load all the required packages.\nlibrary(tensorflow) use_virtualenv(\u0026quot;~/venvs/keras_env\u0026quot;, required = TRUE) # this was the same environment that I tested TensorFlow with Python library(keras) Read in the dataset.\nmnist \u0026lt;- dataset_mnist() Rescale pixel values to be between 0 and 1.\nmnist$train$x \u0026lt;- mnist$train$x/255 mnist$test$x \u0026lt;- mnist$test$x/255 Plot the data.\nx_train \u0026lt;- mnist$train$x y_train \u0026lt;- mnist$train$y # visualize the digits par(mfcol=c(6,6)) par(mar=c(0, 0, 3, 0), xaxs=\u0026#39;i\u0026#39;, yaxs=\u0026#39;i\u0026#39;) for (idx in 1:12) { im \u0026lt;- x_train[idx,,] im \u0026lt;- t(apply(im, 2, rev)) image(1:28, 1:28, im, col=gray((0:255)/255), xaxt=\u0026#39;n\u0026#39;, main=paste(y_train[idx])) }  Keras model model \u0026lt;- keras_model_sequential() %\u0026gt;% layer_flatten(input_shape = c(28, 28)) %\u0026gt;% layer_dense(units = 128, activation = \u0026quot;relu\u0026quot;) %\u0026gt;% layer_dropout(0.2) %\u0026gt;% layer_dense(10, activation = \u0026quot;softmax\u0026quot;) summary(model) ## Model: \u0026quot;sequential\u0026quot; ## ________________________________________________________________________________ ## Layer (type) Output Shape Param # ## ================================================================================ ## flatten (Flatten) (None, 784) 0 ## ________________________________________________________________________________ ## dense_1 (Dense) (None, 128) 100480 ## ________________________________________________________________________________ ## dropout (Dropout) (None, 128) 0 ## ________________________________________________________________________________ ## dense (Dense) (None, 10) 1290 ## ================================================================================ ## Total params: 101,770 ## Trainable params: 101,770 ## Non-trainable params: 0 ## ________________________________________________________________________________ It has over 100.000 parameters!!\nPython has a nice plot_model() function, in R we can use the deepviz package.\ndevtools::install_github(\u0026quot;andrie/deepviz\u0026quot;) library(deepviz) library(magrittr) model %\u0026gt;% plot_model() ## Warning: `select_()` is deprecated as of dplyr 0.7.0. ## Please use `select()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. ## Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. ## Using compatibility `.name_repair`. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated.  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"flatten\\nFlatten\\n\\\", shape = \\\"rectangle\\\", fixedsize = \\\"FALSE\\\", fillcolor = \\\"#F0F8FF\\\", fontcolor = \\\"#000000\\\", pos = \\\"0,4!\\\"] \\n \\\"2\\\" [label = \\\"dense_1\\nDense\\nrelu\\\", shape = \\\"rectangle\\\", fixedsize = \\\"FALSE\\\", fillcolor = \\\"#F0F8FF\\\", fontcolor = \\\"#000000\\\", pos = \\\"0,3!\\\"] \\n \\\"3\\\" [label = \\\"dropout\\nDropout\\n\\\", shape = \\\"rectangle\\\", fixedsize = \\\"FALSE\\\", fillcolor = \\\"#F0F8FF\\\", fontcolor = \\\"#000000\\\", pos = \\\"0,2!\\\"] \\n \\\"4\\\" [label = \\\"dense\\nDense\\nsoftmax\\\", shape = \\\"rectangle\\\", fixedsize = \\\"FALSE\\\", fillcolor = \\\"#F0F8FF\\\", fontcolor = \\\"#000000\\\", pos = \\\"0,1!\\\"] \\n \\\"1\\\"-\\\"2\\\" \\n \\\"2\\\"-\\\"3\\\" \\n \\\"3\\\"-\\\"4\\\" \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}  Compile the model model %\u0026gt;% compile( loss = \u0026quot;sparse_categorical_crossentropy\u0026quot;, optimizer = \u0026quot;adam\u0026quot;, metrics = \u0026quot;accuracy\u0026quot; )  Fit the model model %\u0026gt;% fit( x = mnist$train$x, y = mnist$train$y, epochs = 5, validation_split = 0.3, verbose = 1 )  Make predictions predictions \u0026lt;- predict(model, mnist$test$x) Visualize a single prediction:\nlibrary(ggplot2) id \u0026lt;- 9 ggplot(data.frame(digit = 0:9, prob = predictions[id,]), aes(x = factor(digit), y = prob)) + geom_col() + ggtitle(paste0(\u0026quot;prediction for true value of \u0026quot;, mnist$test$y[id]))  Check model performance on the test set model %\u0026gt;% evaluate(mnist$test$x, mnist$test$y, verbose = 0) ## loss accuracy ## 0.08686701 0.97399998 Our model achieved ~98% accuracy on the test set.\nAwesome.\n ","date":1589500800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589500800,"objectID":"121bd5538454651a1b9f26c355ee6b51","permalink":"/post/deep-learning-tensorflow-keras/","publishdate":"2020-05-15T00:00:00Z","relpermalink":"/post/deep-learning-tensorflow-keras/","section":"post","summary":"With the commoditization of deep learning in the form of Keras, I felt it was about time that I jumped on the Deep Learning bandwagon.","tags":["tensorflow","keras","neural networks","deep learning"],"title":"Building TensorFlow 2.2 on an old PC","type":"post"},{"authors":null,"categories":["Data science"],"content":"  This blog post is on simulating fake data. I'm interested in creating synthetic versions of real datasets. For example if the data is too sensitive to be shared, or we only have summary statistics available (for example tables from a published research paper).\nIf we want to mimic an existing dataset, it is desirable to\n Make sure that the simulated variables have the proper data type and comparable distribution of values and correlations between the variables in the real dataset are taken into account.  In addition, it would be nice if such functionality is available in a standard R package. After reviewing several R packages that can simulate data, I picked the simstudy package as most promising to explore in more detail. simstudy is created by Keith Goldfeld from New York University.\nIn this blog post, I explain how simstudy is able to generate correlated variables, having either continuous or binary values. Along the way, we learn about fancy statistical slang such as copula's and tetrachoric correlations. It turns out there is a close connection with psychometrics, which we'll briefly discuss.\nLet's start with correlated continuous variables.\n# Loading required packages library(simstudy) library(data.table) library(ggplot2) Copulas: Simulating continuous correlated variables Copulas are a fancy word for correlated (\u0026quot;coupled\u0026quot;) variables that each have a uniform distribution between 0 and 1.\nUsing copulas, we can convert correlated multivariate normal data to data from any known continuous probability distribution, while keeping exactly the same correlation matrix. The normal data is something we can easily simulate, and by choosing appropriate probability distributions, we can approximate the variables in real datasets.\nOk let's do it!\nStep 1: correlated multivariate normal data The workhorse for our simulated data is a function to simulate multivariate normal data. We'll use the MASS package function mvrnorm(). Other slightly faster (factor 3-4) implementations exist, see e.g. mvnfast.\nThe trick is to first generate multivariate normal data with the required correlation structure, with mean 0 and standard deviation 1. This gives us correlated data, where each variable is marginally (by itself) normal distributed.\nHere I simulate two variables, but the same procedure holds for N variables. The Pearson correlation is set at 0.7.\nset.seed(123) corr \u0026lt;- 0.7 cov.mat \u0026lt;- matrix(c(1, corr, corr, 1), nrow = 2) df \u0026lt;- data.frame(MASS::mvrnorm(n = 1e4, mu = c(0, 0), Sigma = cov.mat)) (The diagonal of 1 makes sure the variables have SD of 1. The off diagonal value of 0.7 gives us a Pearson correlation of 0.7)\nDid it work?\nggplot(df, aes(x = X1, y = X2)) + geom_point(alpha = 0.3) cor(df$X1, df$X2) ## [1] 0.6985089 Great!\n Step 2: transform variables to uniform distribution Using the normal cumulative distribution function pnorm(), we can transform our normally distributed variables to have a uniform distribution, while keeping the correlation structure intact!!!!\ndf$X1_U \u0026lt;- pnorm(df$X1) df$X2_U \u0026lt;- pnorm(df$X2) ggplot(df, aes(x = X1_U)) + geom_histogram(boundary = 0) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(df, aes(x = X1_U, y = X2_U)) + geom_point(alpha = 0.3) And here's our copula! Two variables, each marginally (by itself) uniform, but with pre-specified correlation intact!\ncor(df$X1_U, df$X2_U) ## [1] 0.677868  Step 3: from uniform to any standard probability distribution we like Now, if we plug in uniformly distributed data in a quantile function of any arbitrary (known) probability distribution, we can make the variables have any distribution we like.\nLet's pick for example a Gamma distribution (Continuous, positive) with shape 4 and rate 1 for X1, and Let's pick a Normal distribution (Continuous, symmetric) with mean 10 and sd 2 for X2.\ndf$X1_GAM \u0026lt;- qgamma(df$X1_U, shape = 4, rate =1) df$X2_NORM \u0026lt;- qnorm(df$X2_U, mean = 10, sd = 2) ggplot(df, aes(x = X1_GAM)) + geom_histogram(boundary = 0) + geom_vline(xintercept = 4, col = \u0026quot;red\u0026quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(df, aes(x = X2_NORM)) + geom_histogram(boundary = 0) + geom_vline(xintercept = 10, col = \u0026quot;red\u0026quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Ok, that worked nicely. But what about their correlation?\ncor(df$X1_GAM, df$X2_NORM) ## [1] 0.682233 Whoa!! They still have (almost) the same correlation we started out with before all our transformation magic.\n  Simstudy in action Now let's see how simstudy helps us generating this type of simulated data. Simstudy works with \u0026quot;definition tables\u0026quot; that allow us to specify, for each variable, which distribution and parameters to use, as well as the desired correlations between the variables.\nAfter specifing a definition table, we can call one of its workhorse functions genCorFlex() to generate the data.\nN.b. Simstudy uses different parameters for the Gamma distribution, compared to R's rgamma() function. Under water, it uses the gammaGetShapeRate() to transform the \u0026quot;mean\u0026quot; and \u0026quot;variance/ dispersion\u0026quot; to the more conventional \u0026quot;shape\u0026quot; and \u0026quot;rate\u0026quot; parameters.\nset.seed(123) corr \u0026lt;- 0.7 corr.mat \u0026lt;- matrix(c(1, corr, corr, 1), nrow = 2) # check that gamma parameters correspond to same shape and rate pars as used above #simstudy::gammaGetShapeRate(mean = 4, dispersion = 0.25) def \u0026lt;- defData(varname = \u0026quot;X1_GAM\u0026quot;, formula = 4, variance = 0.25, dist = \u0026quot;gamma\u0026quot;) def \u0026lt;- defData(def, varname = \u0026quot;X2_NORM\u0026quot;, formula = 10, variance = 2, dist = \u0026quot;normal\u0026quot;) dt \u0026lt;- genCorFlex(1e4, def, corMatrix = corr.mat) cor(dt[,-\u0026quot;id\u0026quot;]) ## X1_GAM X2_NORM ## X1_GAM 1.0000000 0.6823006 ## X2_NORM 0.6823006 1.0000000 ggplot(dt, aes(x = X1_GAM)) + geom_histogram(boundary = 0) + geom_vline(xintercept = 4, col = \u0026quot;red\u0026quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  Generate correlated binary variables As it turns out, the copula approach does not work for binary variables. Well, it sort of works, but the correlations we get are lower than we actually specify.\nCome to think of it: two binary variables cannot have all the correlations we like. To see why, check this out.\nFeasible correlations for two binary variables Let's suppose we have a binary variable that equals 1 with probability 0.2, and zero otherwise. This variable will never be fully correlated with a binary variable that equals 1 with probability 0.8, and zero otherwise.\nTo see this, I created two binary vectors that have a fraction 0.2 and 0.8 of 1's, and let's see if we can arrange the values in both vectors in such a way that minimizes and maximizes their correlation:\n# maximal correlation x1 \u0026lt;- c(0, 0, 0, 0, 1) x2 \u0026lt;- c(0, 1, 1, 1, 1) mean(x1) ## [1] 0.2 mean(x2) ## [1] 0.8 cor(x1, x2) ## [1] 0.25 # minimal correlation x1 \u0026lt;- c(1, 0, 0, 0, 0) x2 \u0026lt;- c(0, 1, 1, 1, 1) cor(x1, x2) ## [1] -1 To get these vectors to be maximally correlated, we need to match 1's in x1 as much as possible with 1s in x2. To get these vectors to be maximally anti-correlated, we need to match 1s in x1 with as many 0s in x2.\nIn this example, we conclude that the feasible correlation range is {-1, 0.25}.\nThe simstudy package contains a function to check for feasible boundaries, that contains this piece of code:\np1 \u0026lt;- 0.2 p2 \u0026lt;- 0.8 # lowest correlation l \u0026lt;- (p1 * p2)/((1 - p1) * (1 - p2)) max(-sqrt(l), -sqrt(1/l)) ## [1] -1 # highest correlation u \u0026lt;- (p1 * (1 - p2))/(p2 * (1 - p1)) min(sqrt(u), sqrt(1/u)) ## [1] 0.25 This confirms our example above.\nNote that if we want to mimic a real dataset with binary correlated variables, the correlations are a given, and are obviously all feasible because we obtain them from actual data.\n A model for two correlated binary variables Ok let's suppose we want a two binary vectors B1 and B2 , with means p1 = 0.2 and p2 = 0.8 and (feasible) Pearson correlation 0.1.\nHow? How?\nThe idea is that to get two binary variables to have an exact particular correlation, we imagine an underlying (\u0026quot;latent\u0026quot;) bivariate (2D) normal distribution. This normal distribution has the means fixed to 0, and the standard deviations fixed to 1.\nWhy? Because a) we know it very well theoretically and b) we know how to simulate efficiently from such a distribution, using mvrnorm().\nIn this bivariate normal distribution, we draw a quadrant (i.e. two thresholds). The thresholds define transformations to binary variables. Below the threshold, the binary value is 0, above it is 1. We have to pick the thresholds such that the resulting binary variables have the desired mean (i.e. percentage of 1's).\nThis approach reduces the problem to finding the right values of three parameters: multivariate normal correlation, and the two thresholds (above, we already fixed the means and variance to zero and one respectively).\nFor now, we'll just pick some value for the correlation in the bivariate normal, say 0.5, and focus on where to put the threshholds.\nset.seed(123) corr \u0026lt;- 0.5 cov.mat \u0026lt;- matrix(c(1, corr, corr, 1), nrow = 2) df \u0026lt;- data.frame(MASS::mvrnorm(n = 10000, mu = c(0, 0), Sigma = cov.mat)) (The diagonal of 1 makes sure the variables have SD of 1. The off diagonal value of 0.7 gives us a Pearson correlation of 0.7)\nggplot(df, aes(x = X1, y = X2)) + geom_point(alpha = 0.3) Ok, where to put the thresholds? That's simple, we just need to use the quantile distribution function to partition the marginal normal variables into 0 and 1 portions.\ndf$B1 \u0026lt;- ifelse(df$X1 \u0026lt; qnorm(0.2), 1, 0) df$B2 \u0026lt;- ifelse(df$X2 \u0026lt; qnorm(0.8), 1, 0) mean(df$B1) ## [1] 0.197 mean(df$B2) ## [1] 0.7988 Let's check it out visually:\nggplot(df, aes(x = X1, y = X2)) + geom_point(alpha = 0.3) + geom_vline(xintercept = qnorm(0.2), col = \u0026quot;red\u0026quot;) + geom_hline(yintercept = qnorm(0.8), col = \u0026quot;red\u0026quot;) Nice.\nOk, so now what is the correlation for these two binary variables?\ncor(df$B1, df$B2) ## [1] 0.1877482 Ok, so if X1 and X2 have a correlation of 0.5, this results in a correlation of 0.19 between the binary variables B1 and B2.\nBut we need B1 and B2 to have a correlation of 0.1!\nAt this point, there is only one free parameter left, the correlation of the normally distributed variables X1 and X2.\nWe could of course manually try to find which correlation we must choose between X1 and X2 to get the desired correlation of 0.1 in the binary variables. But that would be very unpractical.\nFortunately, Emrich and Piedmonte (1991) published an iterative method to solve this puzzle. And this method has been implemented in simstudy.\nsimstudy:::.findRhoBin(p1 = 0.2, p2 = 0.8, d = 0.1) ## [1] 0.2218018 Let's see if it works:\nset.seed(1234) corr \u0026lt;- 0.2218018 cov.mat \u0026lt;- matrix(c(1, corr, corr, 1), nrow = 2) df \u0026lt;- data.frame(MASS::mvrnorm(n = 1e6, mu = c(0, 0), Sigma = cov.mat)) df$B1 \u0026lt;- ifelse(df$X1 \u0026lt; qnorm(0.2), 1, 0) df$B2 \u0026lt;- ifelse(df$X2 \u0026lt; qnorm(0.8), 1, 0) cor(df$B1, df$B2) ## [1] 0.09957392 Great!\n  Relation to psychometrics So what has psychometrics to do with all this simulation of correlated binary vector stuff?\nWell, psychometrics is all about theorizing about unobserved, latent, imaginary \u0026quot;constructs\u0026quot;, such as attitude, general intelligence or a personality trait. To measure these constructs, questionnaires are used. The questions are called items.\nNow imagine a situation where we are interested in a particular construct, say general intelligence, and we design two questions to measure (hope to learn more about) the construct. Furthermore, assume that one question is more difficult than the other question. The answers to both questions can either be wrong or right.\nWe can model this by assuming that the (imaginary) variable \u0026quot;intelligence\u0026quot; of each respondent is located on a two-dimensional plane, with the distribution of the respondents determined by a bivariate normal distribution. Dividing this plane into four quadrants then gives us the measurable answers (right or wrong) to both questions. Learning the answers to both questions then gives us an approximate location of a respondent on our \u0026quot;intelligence\u0026quot; plane!\nPhi, tetrachoric correlation and the psych package Officially, the Pearson correlation between two binary vectors is called the Phi coefficient. This name was actually chosen by Karl Pearson himself.\nThe psych packages contains a set of convenient functions for calculating Phi coefficients from empirical two by two tables (of two binary vectors), and finding the corresponding Pearson coefficient for the 2d (latent) normal. This coefficient is called the tetrachoric correlation. Again a fine archaic slang word for again a basic concept.\nlibrary(psych) ## ## Attaching package: \u0026#39;psych\u0026#39; ## The following objects are masked from \u0026#39;package:ggplot2\u0026#39;: ## ## %+%, alpha # convert simulated binary vectors B1 and B2 to 2x2 table twobytwo \u0026lt;- table(df$B1, df$B2)/nrow(df) phi(twobytwo, digits = 6) ## [1] 0.099574 cor(df$B1, df$B2) ## [1] 0.09957392 # both give the same result We can use phi2tetra to find the tetrachoric correlation that corresponds to the combination of a \u0026quot;Phi coefficient\u0026quot;, i.e. the correlation between the two binary vectors, as well as their marginals. This is a wrapper that builds the two by two frequency table and then calls tetrachoric() . This in turn uses optimize (Maximum Likelihood method?) to find the tetrachoric correlation.\nphi2tetra(0.1, c(0.2, 0.8)) ## [1] 0.2217801 # compare with EP method simstudy:::.findRhoBin(0.2, 0.8, 0.1) ## [1] 0.2218018 Comparing with the Emrich and Piedmonte method, we find that they give identical answers. Great, case closed!\n  Simstudy in action II Now that we feel confident in our methods and assumptions, let's see simstudy in action.\nLet's generate two binary variables, that have marginals of 20% and 80% respectively, and a Pearson correlation coefficient of 0.1.\nset.seed(123) corr \u0026lt;- 0.1 corr.mat \u0026lt;- matrix(c(1, corr, corr, 1), nrow = 2) res \u0026lt;- simstudy::genCorGen(10000, nvars = 2, params1 = c(0.2, 0.8), corMatrix = corr.mat, dist = \u0026quot;binary\u0026quot;, method = \u0026quot;ep\u0026quot;, wide = TRUE) # let\u0026#39;s check the result cor(res[, -c(\u0026quot;id\u0026quot;)]) ## V1 V2 ## V1 1.00000000 0.09682531 ## V2 0.09682531 1.00000000 Awesome, it worked!\n Conclusion Recall, my motivation for simulating fake data with particular variable types and correlation structure is to mimic real datasets.\nSo are we there yet? Well, we made some progress. We now can handle correlated continuous data, as well as correlated binary data.\nBut we need to solve two more problems:\n To simulate a particular dataset, we still need to determine for each variable its data type (binary or continuous), and if it's continuous, what is the most appropriate probability distribution (Normal, Gamma, Log-normal, etc).\n we haven't properly solved correlation between dissimilar data types, e.g. a correlation between a continuous and a binary variable.\n  Judging from the literature (Amatya \u0026amp; Demirtas 2016) and packages such as SimMultiCorrData by Allison Fialkowski, these are both solved, and I only need to learn about them! So, to be continued.\n ","date":1572048000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572048000,"objectID":"f44c3fb8bebb1b30f38acae8e2784c28","permalink":"/post/simulating-fake-data/","publishdate":"2019-10-26T00:00:00Z","relpermalink":"/post/simulating-fake-data/","section":"post","summary":"This blog post is on simulating fake data using the R package [simstudy](https://www.rdatagen.net/page/simstudy/). Motivation comes from my interest in converting real datasets into synthetic ones.","tags":["fake data","simulation","copula","tetrachoric correlation","R"],"title":"Simulating Fake Data in R","type":"post"},{"authors":null,"categories":["Data science"],"content":"  In this post, we'll explore the BupaR suite of Process Mining packages created by Gert Janssenswillen from Hasselt University.\nWe start with exploring the patients dataset contained in the eventdataR package. According to the documentation, this is an \u0026quot;Artifical eventlog about patients\u0026quot;.\nGetting started After installing all required packages, we can load the whole \u0026quot;bupaverse\u0026quot; by loading the bupaR package.\nlibrary(ggplot2) library(bupaR) ## Warning in library(package, lib.loc = lib.loc, character.only = TRUE, ## logical.return = TRUE, : there is no package called \u0026#39;xesreadR\u0026#39; ## Warning in library(package, lib.loc = lib.loc, character.only = TRUE, ## logical.return = TRUE, : there is no package called \u0026#39;processmonitR\u0026#39; ## Warning in library(package, lib.loc = lib.loc, character.only = TRUE, ## logical.return = TRUE, : there is no package called \u0026#39;petrinetR\u0026#39; library(processmapR) Now, our dataset is already in eventlog format, but typically this not the case. Here's how to turn a data.frame into an object of class eventlog:\npatients \u0026lt;- eventdataR::patients df \u0026lt;- eventlog(patients, case_id = \u0026quot;patient\u0026quot;, activity_id = \u0026quot;handling\u0026quot;, activity_instance_id = \u0026quot;handling_id\u0026quot;, lifecycle_id = \u0026quot;registration_type\u0026quot;, timestamp = \u0026quot;time\u0026quot;, resource_id = \u0026quot;employee\u0026quot;) ## Warning: The `add` argument of `group_by()` is deprecated as of dplyr 1.0.0. ## Please use the `.add` argument instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. Let's check it out.\nsummary(df) ## Number of events: 5442 ## Number of cases: 500 ## Number of traces: 7 ## Number of distinct activities: 7 ## Average trace length: 10.884 ## ## Start eventlog: 2017-01-02 11:41:53 ## End eventlog: 2018-05-05 07:16:02 ## handling patient employee handling_id ## Blood test : 474 Length:5442 r1:1000 Length:5442 ## Check-out : 984 Class :character r2:1000 Class :character ## Discuss Results : 990 Mode :character r3: 474 Mode :character ## MRI SCAN : 472 r4: 472 ## Registration :1000 r5: 522 ## Triage and Assessment:1000 r6: 990 ## X-Ray : 522 r7: 984 ## registration_type time .order ## complete:2721 Min. :2017-01-02 11:41:53 Min. : 1 ## start :2721 1st Qu.:2017-05-06 17:15:18 1st Qu.:1361 ## Median :2017-09-08 04:16:50 Median :2722 ## Mean :2017-09-02 20:52:34 Mean :2722 ## 3rd Qu.:2017-12-22 15:44:11 3rd Qu.:4082 ## Max. :2018-05-05 07:16:02 Max. :5442 ##  So we learn that there are 500 \u0026quot;cases\u0026quot;, i.e. patients. There are 7 different activities.\nLet's check out the data for a single patient:\ndf %\u0026gt;% filter(patient == 1) %\u0026gt;% arrange(handling_id) #%\u0026gt;%  ## Log of 12 events consisting of: ## 1 trace ## 1 case ## 6 instances of 6 activities ## 6 resources ## Events occurred from 2017-01-02 11:41:53 until 2017-01-09 19:45:45 ## ## Variables were mapped as follows: ## Case identifier: patient ## Activity identifier: handling ## Resource identifier: employee ## Activity instance identifier: handling_id ## Timestamp: time ## Lifecycle transition: registration_type ## ## # A tibble: 12 x 7 ## handling patient employee handling_id registration_ty… time ## \u0026lt;fct\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dttm\u0026gt; ## 1 Registr… 1 r1 1 start 2017-01-02 11:41:53 ## 2 Registr… 1 r1 1 complete 2017-01-02 12:40:20 ## 3 Blood t… 1 r3 1001 start 2017-01-05 08:59:04 ## 4 Blood t… 1 r3 1001 complete 2017-01-05 14:34:27 ## 5 MRI SCAN 1 r4 1238 start 2017-01-05 21:37:12 ## 6 MRI SCAN 1 r4 1238 complete 2017-01-06 01:54:23 ## 7 Discuss… 1 r6 1735 start 2017-01-07 07:57:49 ## 8 Discuss… 1 r6 1735 complete 2017-01-07 10:18:08 ## 9 Check-o… 1 r7 2230 start 2017-01-09 17:09:43 ## 10 Check-o… 1 r7 2230 complete 2017-01-09 19:45:45 ## 11 Triage … 1 r2 501 start 2017-01-02 12:40:20 ## 12 Triage … 1 r2 501 complete 2017-01-02 22:32:25 ## # … with 1 more variable: .order \u0026lt;int\u0026gt;  # select(handling, handling_id, registration_type) # does not work We learn that each \u0026quot;handling\u0026quot; has a separate start and complete timestamp.\n Traces The summary info of the event log also counts so-called \u0026quot;traces\u0026quot;. A trace is defined a unique sequence of events in the event log. Apparently, there are only seven different traces (possible sequences). Let's visualize them.\nTo visualize all traces, we set coverage to 1.0.\ndf %\u0026gt;% processmapR::trace_explorer(type = \u0026quot;frequent\u0026quot;, coverage = 1.0) ## Warning: `rename_()` is deprecated as of dplyr 0.7.0. ## Please use `rename()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. So there are a few traces (0.6%) that do not end with a check-out. Ignoring these rare cases, we find that there are two types of cases:\n Cases that get an X-ray Cases that get a blood test followed by an MRI scan   The dotted chart A really powerful visualization in process mining comes in the form of a \u0026quot;dotted chart\u0026quot;. The dotted chart function produces a ggplot graph, which is nice, because so we can actually tweak the graph as we can with regular ggplot objects.\nIt has two nice use cases. The first is when we plot actual time on the x-axis, and sort the cases by starting date.\ndf %\u0026gt;% dotted_chart(x = \u0026quot;absolute\u0026quot;, sort = \u0026quot;start\u0026quot;) + ggtitle(\u0026quot;All cases\u0026quot;) + theme_gray() ## Joining, by = \u0026quot;patient\u0026quot; The slope of this graphs learns us the rate of new cases, and if this changes over time. Here it appears constant, with 500 cases divided over five quarter years.\nThe second is to align all cases relative to the first event, and sort on duration of the whole sequence of events.\ndf %\u0026gt;% dotted_chart(x = \u0026quot;relative\u0026quot;, sort = \u0026quot;duration\u0026quot;) + ggtitle(\u0026quot;All cases\u0026quot;) + theme_gray() ## Joining, by = \u0026quot;patient\u0026quot; A nice pattern emerges, where all cases start with registration, then quickly proceed to triage and assessment, after that, a time varying period of 1-10 days follows where either the blood test + MRI scan, or the X-ray is performed, followed by discussing the results. Finally, check out occurs.\n Conclusion To conclude, the process mining approach to analyze time series event data appears highly promising. The dotted chart is a great addition to my data visualization repertoire, and the process mining folks appear to have at lot more goodies, such as Trace Alignment.\n ","date":1560988800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560988800,"objectID":"f36148e4bf390595d95a45aa28e76282","permalink":"/post/exploring-process-mining/","publishdate":"2019-06-20T00:00:00Z","relpermalink":"/post/exploring-process-mining/","section":"post","summary":"In this post, we'll explore the BupaR suite of Process Mining packages created by Gert Janssenswillen of Hasselt University.","tags":["process mining","R"],"title":"Exploring Process Mining in R","type":"post"},{"authors":null,"categories":["Causal inference"],"content":"  Introduction (Short intro) This is me learning causal inference (CI) by self-study together with colleagues using online resources.\n(Longer intro) A modern data scientist needs to become skilled in at least three topics (I left out visualization):\n (Bayesian) Statistical modeling Machine Learning Causal inference  For the first two topics, great introductory books exist that\n focus on learning-by-doing and are low on math and high on simulation / programming in R are fun / well written  For Bayesian statistical modeling, we have the awesome textbook \u0026quot;Statistical Rethinking\u0026quot; by Richard mcElreath.\nFor Machine Learning, we have the (free) book \u0026quot;Introduction to Statistical Learning\u0026quot; by James, Witten, Hastie \u0026amp; Tibshirani.\nHowever, for Causal Inference, such a book does not exist yet AFAIK. Therefore, I tried to piece together a Causal Inference course based on the criteria mentioned above.\n Designing an introductory causal inference course Explicit goal was to contrast/combine the causal graph (DAG) approach with what some call \u0026quot;Quasi-experimental designs\u0026quot;, i.e. the econometric causal effects toolkit (Regression Discontinuity Design, matching, instrumental variables etc).\nIn the end, I decided to combine the two causal chapters from Gelman \u0026amp; Hill (2007) (freely available on Gelman's website) with the introductory chapter on Causal Graphical Models by Felix Elwert (freely available on Elwert's website).\nThe Gelman \u0026amp; Hill chapters already come with a set of exercises. However, for DAGs, i could not find a suitable set of exercises.\nSo I created two R markdown notebooks with exercises in R, that make use of the DAGitty tool, created by Johannes Textor and freely available as R package.\nSome exercises are taken from Causal inference in statistics: A Primer by Pearl, Glymour \u0026amp; Jewell. (I probably should own this book. So I just ordered it :))\nAll materials are available in a GitHub repository\n Outline of the course The course has four parts.\nGeneral introduction The course starts with the first causal chapter of Gelman \u0026amp; Hill's book, \u0026quot;Causal inference using regression on the treatment variable\u0026quot;. This creates a first complete experience with identifying and estimating causal effects. However, there are no causal diagrams, which is unfortunate.\n Identification of Causal effects using DAGs Next we dive into causal identification using the causal diagram approach. For this we use the chapter \u0026quot;Causal Graphical Models\u0026quot; by Felix Elwert. Two R markdown Notebooks with exercises using Dagitty complete this part.\n Identification and estimation strategies We then continue with the second causal chapter of Gelman \u0026amp; Hill \u0026quot;Causal inference using more advanced models\u0026quot;. This covers matching, regression discontinuity design, and instrumental variables. This material is combined with a paper by Scheiner et al, that contains DAGs for these methods. In our study group DAGs greatly facilitated discussion of the various designs.\n Varying treatment effects using Machine Learning Finally, and this part of the course has yet to take place, is the topic of estimating heterogeneous (i.e. subgroup, or even individual) treatment effects. This covers recent developements based on (forests of) regression trees. The plan is to cover both bayesian (BART, Chipman \u0026amp; mcCullough) and non-bayesian (GRF, Athey \u0026amp; Wager) methods.\n  Looking back so far The causal diagram / DAG approach is nonparametric and its purpose is to\n Make assumptions on the data generating process explicit Formalize identification of causal effects  Thus, it is separate from, and complements statistical estimation. The distinction between identification and estimation is not so explicitly made in the Gelman \u0026amp; Hill chapters, at least this is my impression. It would really benefit from adding DAGs, as Richard mcElreath is doing in his upcoming second edition of Statistical Rethinking.\nAfter having worked through these materials, I think reading Shalizi's chapters on Causal Effects would be a smart move. This is part III of his book \u0026quot;Advanced Data Analysis from an Elementary Point of View\u0026quot;, which is awesome in its clarity, practical remarks a.k.a. normative statements by the author, and breadth.\nIf you have a question, would like to comment or share ideas feel free to contact me.\n ","date":1557532800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557532800,"objectID":"71aeaecf1bbcd7d5f52d2141de1743f4","permalink":"/post/causal-inference-course/","publishdate":"2019-05-11T00:00:00Z","relpermalink":"/post/causal-inference-course/","section":"post","summary":"In this blog post, I describe the introductory course on Causal Inference I pieced together using various materials available online. It combines Pearl's Causal Graph approach with statistics Gelman/mcElreath style.","tags":["R","causal inference","DAG","causal graph"],"title":"Designing an introductory course on Causal Inference","type":"post"},{"authors":null,"categories":["Machine learning"],"content":"  In this blog post, we explore how to implement the validation set approach in caret. This is the most basic form of the train/test machine learning concept. For example, the classic machine learning textbook \u0026quot;An introduction to Statistical Learning\u0026quot; uses the validation set approach to introduce resampling methods.\nIn practice, one likes to use k-fold Cross validation, or Leave-one-out cross validation, as they make better use of the data. This is probably the reason that the validation set approach is not one of caret's preset methods.\nBut for teaching purposes it would be very nice to have a caret implementation.\nThis would allow for an easy demonstration of the variability one gets when choosing different partionings. It also allows direct demonstration of why k-fold CV is superior to the validation set approach with respect to bias/variance.\nWe pick the BostonHousing dataset for our example code.\n# Boston Housing knitr::kable(head(Boston))   crim zn indus chas nox rm age dis rad tax ptratio black lstat medv    0.00632 18 2.31 0 0.538 6.575 65.2 4.0900 1 296 15.3 396.90 4.98 24.0  0.02731 0 7.07 0 0.469 6.421 78.9 4.9671 2 242 17.8 396.90 9.14 21.6  0.02729 0 7.07 0 0.469 7.185 61.1 4.9671 2 242 17.8 392.83 4.03 34.7  0.03237 0 2.18 0 0.458 6.998 45.8 6.0622 3 222 18.7 394.63 2.94 33.4  0.06905 0 2.18 0 0.458 7.147 54.2 6.0622 3 222 18.7 396.90 5.33 36.2  0.02985 0 2.18 0 0.458 6.430 58.7 6.0622 3 222 18.7 394.12 5.21 28.7    Our model is predicting medv (Median house value) using predictors indus and chas in a multiple linear regression. We split the data in half, 50% for fitting the model, and 50% to use as a validation set.\nStratified sampling vs random sampling To check if we understand what caret does, we first implement the validation set approach ourselves. To be able to compare, we need exactly the same data partitions for our manual approach and the caret approach. As caret requires a particular format (a named list of sets of train indices) we conform to this standard. However, all caret partitioning functions seem to perform stratified random sampling. This means that it first partitions the data in equal sized groups based on the outcome variable, and then samples at random within those groups to partitions that have similar distributions for the outcome variable.\nThis not desirable for teaching, as it adds more complexity. In addition, it would be nice to be able to compare stratified vs. random sampling.\nWe therefore write a function that generates truly random partitions of the data. We let it generate partitions in the format that trainControl likes.\n# internal function from caret package, needed to play nice with resamples() prettySeq \u0026lt;- function(x) paste(\u0026quot;Resample\u0026quot;, gsub(\u0026quot; \u0026quot;, \u0026quot;0\u0026quot;, format(seq(along = x))), sep = \u0026quot;\u0026quot;) createRandomDataPartition \u0026lt;- function(y, times, p) { vec \u0026lt;- 1:length(y) n_samples \u0026lt;- round(p * length(y)) result \u0026lt;- list() for(t in 1:times){ indices \u0026lt;- sample(vec, n_samples, replace = FALSE) result[[t]] \u0026lt;- indices #names(result)[t] \u0026lt;- paste0(\u0026quot;Resample\u0026quot;, t) } names(result) \u0026lt;- prettySeq(result) result } createRandomDataPartition(1:10, times = 2, p = 0.5) ## $Resample1 ## [1] 4 3 7 9 10 ## ## $Resample2 ## [1] 8 6 1 7 10  The validation set approach without caret Here is the validation set approach without using caret. We create a single random partition of the data in train and validation set, fit the model on the training data, predict on the validation data, and calculate the RMSE error on the test predictions.\nset.seed(1234) parts \u0026lt;- createRandomDataPartition(Boston$medv, times = 1, p = 0.5) train \u0026lt;- parts$Resample1 # fit ols on train data lm.fit \u0026lt;- lm(medv ~ indus + chas , data = Boston[train,]) # predict on held out data preds \u0026lt;- predict(lm.fit, newdata = Boston[-train,]) # calculate RMSE validation error sqrt(mean((preds - Boston[-train,]$medv)^2)) ## [1] 7.930076 If we feed caret the same data partition, we expect exactly the same test error for the held-out data. Let's find out!\n The validation set approach in caret Now we use the caret package. Regular usage requires two function calls, one to trainControl to control the resampling behavior, and one to train to do the actual model fitting and prediction generation.\nAs the validation set approach is not one of the predefined methods, we need to make use of the index argument to explicitely define the train partitions outside of caret. It automatically predicts on the records that are not contained in the train partitions.\nThe index argument plays well with the createDataPartition (Stratfied sampling) and createRandomDataPartition (our own custom function that performs truly random sampling) functions, as these functions both generate partitions in precisely the format that index wants: lists of training set indices.\nIn the code below, we generate four different 50/50 partitions of the data.\nWe set savePredictions to TRUE to be able to verify the calculated metrics such as the test RMSE.\nset.seed(1234) # create four partitions parts \u0026lt;- createRandomDataPartition(Boston$medv, times = 4, p = 0.5) ctrl \u0026lt;- trainControl(method = \u0026quot;repeatedcv\u0026quot;, ## The method doesn\u0026#39;t matter ## since we are defining the resamples index= parts, ##verboseIter = TRUE, ##repeats = 1, savePredictions = TRUE ##returnResamp = \u0026quot;final\u0026quot; )  Now we can run caret and fit the model four times:\nres \u0026lt;- train(medv ~ indus + chas, data = Boston, method = \u0026quot;lm\u0026quot;, trControl = ctrl) res ## Linear Regression ## ## 506 samples ## 2 predictor ## ## No pre-processing ## Resampling: Cross-Validated (10 fold, repeated 1 times) ## Summary of sample sizes: 253, 253, 253, 253 ## Resampling results: ## ## RMSE Rsquared MAE ## 7.906538 0.2551047 5.764773 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE From the result returned by train we can verify that it has fitted a model on four different datasets, each of size 253. By default it reports the average test error over the four validation sets. We can also extract the four individual test errors:\n# strangely enough, resamples() always wants at least two train() results # see also the man page for resamples() resamples \u0026lt;- resamples(list(MOD1 = res, MOD2 = res)) resamples$values$`MOD1~RMSE` ## [1] 7.930076 8.135428 7.899054 7.661595 # check that we recover the RMSE reported by train() in the Resampling results mean(resamples$values$`MOD1~RMSE`) ## [1] 7.906538 summary(resamples) ## ## Call: ## summary.resamples(object = resamples) ## ## Models: MOD1, MOD2 ## Number of resamples: 4 ## ## MAE ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## MOD1 5.516407 5.730172 5.809746 5.764773 5.844347 5.923193 0 ## MOD2 5.516407 5.730172 5.809746 5.764773 5.844347 5.923193 0 ## ## RMSE ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## MOD1 7.661595 7.839689 7.914565 7.906538 7.981414 8.135428 0 ## MOD2 7.661595 7.839689 7.914565 7.906538 7.981414 8.135428 0 ## ## Rsquared ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## MOD1 0.2339796 0.2377464 0.2541613 0.2551047 0.2715197 0.2781167 0 ## MOD2 0.2339796 0.2377464 0.2541613 0.2551047 0.2715197 0.2781167 0 Note that the RMSE value for the first train/test partition is exactly equal to our own implementation of the validation set approach. Awesome.\n Validation set approach: stratified sampling versus random sampling Since we now know what we are doing, let's perform a simulation study to compare stratified random sampling with truly random sampling, using the validation set approach, and repeating this proces say a few thousand times to get a nice distribution of test errors.\n# simulation settings n_repeats \u0026lt;- 3000 train_fraction \u0026lt;- 0.8 First we fit the models on the random sampling data partitions:\nset.seed(1234) parts \u0026lt;- createRandomDataPartition(Boston$medv, times = n_repeats, p = train_fraction) ctrl \u0026lt;- trainControl(method = \u0026quot;repeatedcv\u0026quot;, ## The method doesn\u0026#39;t matter index= parts, savePredictions = TRUE ) rand_sampl_res \u0026lt;- train(medv ~ indus + chas, data = Boston, method = \u0026quot;lm\u0026quot;, trControl = ctrl) rand_sampl_res ## Linear Regression ## ## 506 samples ## 2 predictor ## ## No pre-processing ## Resampling: Cross-Validated (10 fold, repeated 1 times) ## Summary of sample sizes: 405, 405, 405, 405, 405, 405, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 7.868972 0.2753001 5.790874 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE Next, we fit the models on the stratified sampling data partitions:\nset.seed(1234) parts \u0026lt;- createDataPartition(Boston$medv, times = n_repeats, p = train_fraction, list = T) ctrl \u0026lt;- trainControl(method = \u0026quot;repeatedcv\u0026quot;, ## The method doesn\u0026#39;t matter index= parts, savePredictions = TRUE ) strat_sampl_res \u0026lt;- train(medv ~ indus + chas, data = Boston, method = \u0026quot;lm\u0026quot;, trControl = ctrl) strat_sampl_res ## Linear Regression ## ## 506 samples ## 2 predictor ## ## No pre-processing ## Resampling: Cross-Validated (10 fold, repeated 1 times) ## Summary of sample sizes: 407, 407, 407, 407, 407, 407, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 7.83269 0.277719 5.769507 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE Then, we merge the two results to compare the distributions:\nresamples \u0026lt;- resamples(list(RAND = rand_sampl_res, STRAT = strat_sampl_res))  Analyzing caret resampling results We now analyse our resampling results. We can use the summary method on our resamples object:\nsummary(resamples) ## ## Call: ## summary.resamples(object = resamples) ## ## Models: RAND, STRAT ## Number of resamples: 3000 ## ## MAE ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## RAND 4.406326 5.475846 5.775077 5.790874 6.094820 7.582886 0 ## STRAT 4.401729 5.477664 5.758201 5.769507 6.058652 7.356133 0 ## ## RMSE ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## RAND 5.328128 7.323887 7.847369 7.868972 8.408855 10.78024 0 ## STRAT 5.560942 7.304199 7.828765 7.832690 8.328966 10.44186 0 ## ## Rsquared ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## RAND 0.06982417 0.2259553 0.2733762 0.2753001 0.3249820 0.5195017 0 ## STRAT 0.05306875 0.2263577 0.2752015 0.2777190 0.3277577 0.4977015 0 We can also use the plot function provided by the caret package. It plots the mean of our performance metric (RMSE), as well as estimation uncertainty of this mean. Note that the confidence intervals here are based on a normal approximation (One sample t-test).\n# caret:::ggplot.resamples # t.test(resamples$values$`RAND~RMSE`) ggplot(resamples, metric = \u0026quot;RMSE\u0026quot;)  My personal preference is to more directly display both distributions. This is done by bwplot() (caret does not have ggplot version of this function).\nbwplot(resamples, metric = \u0026quot;RMSE\u0026quot;) It does seems that stratified sampling paints a slightly more optimistic picture of the test error when compared to truly random sampling. However, we can also see that random sampling has somewhat higher variance when compared to stratified sampling.\nBased on these results, it seems like stratified sampling is indeed a reasonable default setting for caret.\n Update: LGOCV set.seed(1234) ctrl \u0026lt;- trainControl(method = \u0026quot;LGOCV\u0026quot;, ## The method doesn\u0026#39;t matter repeats = n_repeats, number = 1, p = 0.5, savePredictions = TRUE )  ## Warning: `repeats` has no meaning for this resampling method. lgocv_res \u0026lt;- train(medv ~ indus + chas, data = Boston, method = \u0026quot;lm\u0026quot;, trControl = ctrl) lgocv_res ## Linear Regression ## ## 506 samples ## 2 predictor ## ## No pre-processing ## Resampling: Repeated Train/Test Splits Estimated (1 reps, 50%) ## Summary of sample sizes: 254 ## Resampling results: ## ## RMSE Rsquared MAE ## 8.137926 0.2389733 5.763309 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE  ","date":1553126400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553126400,"objectID":"faf4add31be0ffd08e307b2b0c4b5704","permalink":"/post/validation-set-approach-in-caret/","publishdate":"2019-03-21T00:00:00Z","relpermalink":"/post/validation-set-approach-in-caret/","section":"post","summary":"In this blog post, we explore how to implement the validation set approach in caret. This is the most basic form of the train/test machine learning concept.","tags":["R","caret"],"title":"The validation set approach in caret","type":"post"},{"authors":null,"categories":["Electronics"],"content":"  In this post, I show how to create a Arduino-based atmospheric sensor circuit capable of storing large amounts of data on a microSD card.\nNowadays, one can buy a commercial Thermo/Hygro datalogger for 50 Euro online (i.e. https://www.vitalitools.nl/lascar-electronics-el-usb-2-datalogger). However, I decided that it would be a nice project to learn more about Arduino, in particular how to interface it with a microSD card. So i made one myself. Working with SD cards has the advantage of having a huge storage capacity. To give you an impression: Below we analyse 10K measurements stored in a 60 Kb file, the SD card can hold 4 Gb!\nComponents After some research I ordered:\n A microSD card reader/writer with SPI interface (Catalex card) A Bosch BME-280 temperature/pressure/humidity sensor with I2C interface  As the BME-280 sensor operates at 3.3V and my Arduino Nano at 5V, I also ordered a four channel Logic Level Converter to convert the 5V I2C on the Arduino side of the LLC to 3.3V on the BME-280 side.\nTo make the circuit Mains powered, i took an old Samsung mobile phone Charger (5V 0.7A), cutoff the plug and attached it to the breadboard.\n Circuit \u0026amp; Programming The breadboard layout (created using Fritzing) is shown below:\n At first i was using the Arduino 5V pin (with Arduino connected to USB at the front of my Desktop PC, these USB ports might have lower current) to power both the SD card and the Level converter. Separately they would work fine, but together in one circuit the SD card gave erratic results. I guessed that current consumption was too high, and during testing I used the 5V charger as power supply for the SD card. During actual usage I used the 5V charger to power both the SD card AND the Arduino Nano, which worked nicely.\nCoding was simple, i just combined the example code and libraries for a SPI SD card and for a BME-280 I2C sensor. I put the code on GitHub anyway as a reference.\n Data collection and preparation I ended up testing the device by letting it collect measurements in four different places within the house. In the following order:\n The living room The basement First floor bedroom First floor bathroom  After collecting the data I put the microSD card in a microSD card reader and copied the DATALOG.TXT CSV file to my pc for analysis in R.\ndf \u0026lt;- read.csv2(\u0026quot;DATALOG.TXT\u0026quot;, header = F) colnames(df) \u0026lt;- c(\u0026quot;Time\u0026quot;, \u0026quot;Temp\u0026quot;, \u0026quot;Hum\u0026quot;, \u0026quot;Pressure\u0026quot;) # give the four traces a unique ID df$start_trace \u0026lt;- ifelse(df$Time == 0, 1, 0) df$trace_id \u0026lt;- cumsum(df$start_trace) mdf \u0026lt;- melt(df, id.vars = c(\u0026quot;Time\u0026quot;, \u0026quot;trace_id\u0026quot;)) ## Warning in melt(df, id.vars = c(\u0026quot;Time\u0026quot;, \u0026quot;trace_id\u0026quot;)): The melt generic in ## data.table has been passed a data.frame and will attempt to redirect to the ## relevant reshape2 method; please note that reshape2 is deprecated, and this ## redirection is now deprecated as well. To continue using melt methods from ## reshape2 while both libraries are attached, e.g. melt.list, you can prepend the ## namespace like reshape2::melt(df). In the next version, this warning will become ## an error. ## Warning: attributes are not identical across measure variables; they will be ## dropped # label the four traces trace_id \u0026lt;- 1:4 trace_name \u0026lt;- c(\u0026quot;Living room\u0026quot;, \u0026quot;Basement\u0026quot;, \u0026quot;Bedroom 1st floor\u0026quot;, \u0026quot;Bathroom 1st floor\u0026quot;) cod \u0026lt;- data.table(trace_id, trace_name = factor(trace_name, levels = trace_name)) mdf \u0026lt;- data.table(merge(mdf, cod, by = \u0026quot;trace_id\u0026quot;)) mdf \u0026lt;- mdf[, value := as.numeric(value)]  Analysis Pressure We start with the pressure measurements. This is supposed to be a proxy for altitude.\nggplot(mdf[mdf$variable == \u0026quot;Pressure\u0026quot; \u0026amp; Time \u0026gt; 1], aes(x = Time, y = value, color = variable, group = variable)) + geom_point(col = \u0026quot;grey\u0026quot;) + facet_grid(~ trace_name) + geom_smooth(size = 1) ## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula \u0026#39;y ~ x\u0026#39; The basement, which is the lowest, has the highest pressure. But the difference between living room (ground floor) and the two rooms at the first floor is less pronounced. What is not so clear is what drives the changes in pressure WHILE the sensor is at a particular location, i.e. in the basement, or on the 1st floor. But no time to dwell on that, let's move on to the temperature!\n Temperature ggplot(mdf[mdf$variable == \u0026quot;Temp\u0026quot; \u0026amp; Time \u0026gt; 1], aes(x = Time, y = value, color = variable, group = variable)) + geom_point() + facet_grid(~ trace_name) Here, it appears that the sequence of the rooms can explain the slowly changing patterns of temperature. We started out in the Living room at 21C (The thermostat was set at 20C at that time). Then towards the cold basement. It appears that temperature needed some time to equilibrate, possibly because the breadboard was placed on an elevated plastic box, insulating it from below. In the bedroom it was placed on the (cold) floor, and it was already cold from the basement. Then in the bathroom, the final location, it went up, probably due to the floor being heated to keep the bathroom at 18C.\n Relative Humidity Finally, the relative humidity. This appears super strongly correlated with the temperature.\nggplot(mdf[mdf$variable == \u0026quot;Hum\u0026quot; \u0026amp; Time \u0026gt; 1], aes(x = Time, y = value, color = variable, group = variable)) + geom_point() + facet_grid(~ trace_name) Here we see that the living room is at a agreeable 45% RH. The basement has a higher RH percentage, expected because it's colder.\nAccording to Wikipedia:\nHumans can be comfortable within a wide range of humidities depending on the temperature—from 30% to 70%[14]—but ideally between 50%[15] and 60%.[16] Very low humidity can create discomfort, respiratory problems, and aggravate allergies in some individuals.\nThe bedroom is also at a nice humidity level of 55% RH. The bathroom floor was being heated, and this unsurprisingly reduces the local RH to below 40%.\n  Conclusion It all seems to work pretty well. Measurement quality appears reasonable, with temperature and humidity consistent and with little noise, whereas the pressure reading needs some averaging / smoothing to get a stable signal.\nI had great fun making this device!\n ","date":1551744000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551744000,"objectID":"8fec54b618880788adf021e0480e50fc","permalink":"/post/arduino-atmospheric-datalogger/","publishdate":"2019-03-05T00:00:00Z","relpermalink":"/post/arduino-atmospheric-datalogger/","section":"post","summary":"In this post, I show how to create a Arduino-based atmospheric sensor prototype capable of storing large amounts of data on a microSD card.","tags":["Arduino"],"title":"Arduino Weather Station with datalogging","type":"post"},{"authors":null,"categories":["causal inference","machine learning"],"content":"  Load packages # library(devtools) #devtools::install_github(\u0026quot;vdorie/dbarts\u0026quot;) library(dbarts) library(ggplot2) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ── ## ✔ tibble 3.0.4 ✔ dplyr 1.0.2 ## ✔ tidyr 1.1.2 ✔ stringr 1.4.0 ## ✔ readr 1.4.0 ✔ forcats 0.5.0 ## ✔ purrr 0.3.4 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ tidyr::extract() masks dbarts::extract() ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(grf) #devtools::install_github(\u0026quot;vdorie/aciccomp/2017\u0026quot;) library(aciccomp2017) library(cowplot) source(\u0026quot;CalcPosteriors.R\u0026quot;) fullrun \u0026lt;- 0  Dataset 1: Simulated dataset from Friedman MARS paper This is not a causal problem but a prediction problem.\n## y = f(x) + epsilon , epsilon ~ N(0, sigma) ## x consists of 10 variables, only first 5 matter f \u0026lt;- function(x) { 10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3] - 0.5)^2 + 10 * x[,4] + 5 * x[,5] } set.seed(99) sigma \u0026lt;- 1.0 n \u0026lt;- 100 x \u0026lt;- matrix(runif(n * 10), n, 10) Ey \u0026lt;- f(x) y \u0026lt;- rnorm(n, Ey, sigma) df \u0026lt;- data.frame(x, y, y_true = Ey) fit BART model on simulated Friedman data if(fullrun){ ## run BART set.seed(99) bartFit \u0026lt;- bart(x, y) saveRDS(bartFit, \u0026quot;s1.rds\u0026quot;) } else { bartFit \u0026lt;- readRDS(\u0026quot;s1.rds\u0026quot;)} plot(bartFit) MCMC or sigma looks ok.\ncompare BART fit to true values df2 \u0026lt;- data.frame(df, ql = apply(bartFit$yhat.train, length(dim(bartFit$yhat.train)), quantile,probs=0.05), qm = apply(bartFit$yhat.train, length(dim(bartFit$yhat.train)), quantile,probs=.5), qu \u0026lt;- apply(bartFit$yhat.train, length(dim(bartFit$yhat.train)), quantile,probs=0.95) ) bartp \u0026lt;- ggplot(df2, aes(x= y, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_abline(intercept = 0, slope = 1, col = \u0026quot;red\u0026quot;, size = 1) bartp ## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula \u0026#39;y ~ x\u0026#39; This looks nice.\n  Fit Grf regression forest on Friedman data From the manual: Trains a regression forest that can be used to estimate the conditional mean function mu(x) = E[Y | X = x]\nif(fullrun){ reg.forest = regression_forest(x, y, num.trees = 2000) saveRDS(reg.forest, \u0026quot;s00.rds\u0026quot;) } else {reg.forest \u0026lt;- readRDS(\u0026quot;s00.rds\u0026quot;)} df3 \u0026lt;- CalcPredictionsGRF(x, reg.forest) df3 \u0026lt;- data.frame(df3, y) ggplot(df3, aes(x= y, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_abline(intercept = 0, slope = 1, col = \u0026quot;red\u0026quot;, size = 1) This is pretty bad compared to BART. What's wrong here?\nFrom reference.md: GRF isn't working well on a small dataset\nIf you observe poor performance on a dataset with a small number of examples, it may be worth trying out two changes:\n Disabling honesty. As noted in the section on honesty above, when honesty is enabled, the training subsample is further split in half before performing splitting. This may not leave enough information for the algorithm to determine high-quality splits. Skipping the variance estimate computation, by setting ci.group.size to 1 during training, then increasing sample.fraction. Because of how variance estimation is implemented, sample.fraction cannot be greater than 0.5 when it is enabled. If variance estimates are not needed, it may help to disable this computation and use a larger subsample size for training.  Dataset is pretty small (n=100). Maybe turn of honesty? We cannot turn off variance estimate computation, because we want the CI's\nif(fullrun){ reg.forest2 = regression_forest(x, y, num.trees = 2000, honesty = FALSE) saveRDS(reg.forest2, \u0026quot;s001.rds\u0026quot;) } else {reg.forest2 \u0026lt;- readRDS(\u0026quot;s001.rds\u0026quot;)} df2 \u0026lt;- CalcPredictionsGRF(x, reg.forest2) df2 \u0026lt;- data.frame(df2, y) grfp \u0026lt;- ggplot(df2, aes(x= y, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_abline(intercept = 0, slope = 1, col = \u0026quot;red\u0026quot;, size = 1) grfp ## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula \u0026#39;y ~ x\u0026#39; Ah! better now. But Grf still worse than BART. We ran with 2000 trees and turned of honesty. Perhaps dataset too small? Maybe check out the sample.fraction parameter? Sample.fraction is set by default at 0.5, so only half of data is used to grow tree. OR use tune.parameters = TRUE\n Compare methods gp \u0026lt;- plot_grid(bartp, grfp) ## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula \u0026#39;y ~ x\u0026#39; ## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula \u0026#39;y ~ x\u0026#39; gp    Dataset 2: Simulated data from ACIC 2017 This is a bigger dataset, N=4302.\n Treatment effect \\(\\tau\\) is a function of covariates x3, x24, x14, x15 Probability of treatment \\(\\pi\\) is a function of covariates x1, x43, x10. Outcome is a function of x43 Noise is a function of x21  head(input_2017[, c(3,24,14,15)]) ## x_3 x_24 x_14 x_15 ## 1 20 white 0 2 ## 2 0 black 0 0 ## 3 0 white 0 1 ## 4 10 white 0 0 ## 5 0 black 0 0 ## 6 1 white 0 0 Check transformed covariates used to create simulated datasets.\n# zit hidden in package head(aciccomp2017:::transformedData_2017) ## x_1 x_3 x_10 x_14 x_15 x_21 x_24 x_43 ## 2665 -1.18689448 gt_0 leq_0 leq_0 gt_0 J E -1.0897971 ## 22 -0.04543705 leq_0 leq_0 leq_0 leq_0 J B 1.1223750 ## 2416 0.13675482 leq_0 leq_0 leq_0 gt_0 J E 0.6136700 ## 1350 -0.24062700 gt_0 leq_0 leq_0 leq_0 J E -0.2995632 ## 3850 1.02054653 leq_0 leq_0 leq_0 leq_0 I B 0.6136700 ## 4167 -1.18689448 gt_0 leq_0 leq_0 leq_0 K E -1.5961206 So we find that we should not take the functions in Dorie 2018 (debrief.pdf) literately. x_3 used to calculate the treatment effect is derived from x_3 in the input data. x_24 used to calculate the treatment effect is derived from x_24 in the input data. Both have become binary variables.\nTurns out that this was a feature of the 2016 ACIC and IS mentioned in the debrief.pdf\nWe pick the iid, strong signal, low noise, low confounding first. Actually from estimated PS (W.hat) it seems that every obs has probability of treatment 50%.\nparameters_2017[21,] ## errors magnitude noise confounding ## 21 iid 1 0 0 # easiest? Grab the first replicate.\nsim \u0026lt;- dgp_2017(21, 1) Fit BART to ACIC 2017 dataset Need also counterfactual predictions. Most efficient seems to create x.test with Z reversed. This will give use a y.test as well as y.train in the output. We expect draws for both. Plotting a histogram of the difference gives us the treatment effect with uncertainty.\nFrom the MCMC draws for sigma we infer that we need to drop more \u0026quot;burn in\u0026quot; samples.\nPrepare data for BART, including x.test with treatment reversed:\n# combine x and y y \u0026lt;- sim$y x \u0026lt;- model.matrix(~. ,cbind(z = sim$z, input_2017)) # flip z for counterfactual predictions (needed for BART) x.test \u0026lt;- model.matrix(~. ,cbind(z = 1 - sim$z, input_2017)) ## run BART #fullrun \u0026lt;- 0 if(fullrun){ set.seed(99) bartFit \u0026lt;- bart(x, y, x.test, nskip = 350, ntree = 1000) saveRDS(bartFit, \u0026quot;s2.rds\u0026quot;) } else { bartFit \u0026lt;- readRDS(\u0026quot;s2.rds\u0026quot;)} plot(bartFit) Extract individual treatment effect (ITE / CATE) plus uncertainty from bartfit This means switching z from 0 to 1 and looking at difference in y + uncertainty in y.\n#source(\u0026quot;calcPosteriors.R\u0026quot;) sim \u0026lt;- CalcPosteriorsBART(sim, bartFit, \u0026quot;z\u0026quot;) sim \u0026lt;- sim %\u0026gt;% arrange(alpha) bartp \u0026lt;- ggplot(sim, aes(x = 1:nrow(sim), qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_point(aes(y = alpha), col = \u0026quot;red\u0026quot;) + ylim(-2.5, 4.5) bartp ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; ## Warning: Removed 1 rows containing missing values (geom_smooth). This looks sort of ok, but still weird. Some points it gets REALLY wrong.\n Calculate coverage sim \u0026lt;- sim %\u0026gt;% mutate(in_ci = ql \u0026lt; alpha \u0026amp; qu \u0026gt; alpha) mean(sim$in_ci) ## [1] 0.4363087 Pretty bad coverage. Look into whats going on here. Here it should be 0.9\nThe iid plot for method 2 gives coverage 0.7 (where it should be 0.95)\n Calculate RMSE of CATE sqrt(mean((sim$alpha - sim$ite)^2)) ## [1] 0.1587338 For All i.i.d. (averaged over 250 replicates averaged over 8 scenarios) method 2 (BART should have RMSE of CATE of 0.35-0.4)\n  Fit grf to ACIC 2017 dataset need large num.trees for CI.\n# prep data for Grf # combine x and y sim \u0026lt;- dgp_2017(21, 1) Y \u0026lt;- sim$y X \u0026lt;- model.matrix(~. ,input_2017) W = sim$z # Train a causal forest. #fullrun \u0026lt;- 0 if(fullrun){ grf.fit_alt \u0026lt;- causal_forest(X, Y, W, num.trees = 500) saveRDS(grf.fit_alt, \u0026quot;s3.rds\u0026quot;) } else{grf.fit_alt \u0026lt;- readRDS(\u0026quot;s3.rds\u0026quot;)} It appears that using 4000 trees consumes too much memory (bad_alloc)\n Compare predictions vs true value df_sep2 \u0026lt;- CalcPredictionsGRF(X, grf.fit_alt) df_sep2 \u0026lt;- data.frame(df_sep2, Y, W, TAU = sim$alpha) df_sep2 \u0026lt;- df_sep2 %\u0026gt;% arrange(TAU) grfp \u0026lt;- ggplot(df_sep2, aes(x = 1:nrow(df_sep2), y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_point(aes(y = TAU), col = \u0026quot;red\u0026quot;) + ylim(-2.5, 4.5) grfp ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; This works ok now.\n Compare both methods gp \u0026lt;- plot_grid(bartp, grfp) ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; ## Warning: Removed 1 rows containing missing values (geom_smooth). ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; gp   Dataset 3: simulated data used by grf example THis dataset is used in the Grf manual page. Size N = 2000. Probability of treatment function of X1. Treatment effect function of X1.\n# Generate data. set.seed(123) n = 2000; p = 10 X = matrix(rnorm(n*p), n, p) # treatment W = rbinom(n, 1, 0.4 + 0.2 * (X[,1] \u0026gt; 0)) # outcome (parallel max) Y = pmax(X[,1], 0) * W + X[,2] + pmin(X[,3], 0) + rnorm(n) # TAU is true treatment effect df \u0026lt;- data.frame(X, W, Y, TAU = pmax(X[,1], 0)) Fit GRF Default settings are honesty = TRUE.\n# Train a causal forest. if(fullrun){ tau.forest = causal_forest(X, Y, W, num.trees = 2000) saveRDS(tau.forest, \u0026quot;s4.rds\u0026quot;) } else {tau.forest \u0026lt;- readRDS(\u0026quot;s4.rds\u0026quot;)}  OOB predictions From the GRF manual:\nGiven a test example, the GRF algorithm computes a prediction as follows:\nFor each tree, the test example is \u0026#39;pushed down\u0026#39; to determine what leaf it falls in. Given this information, we create a list of neighboring training examples, weighted by how many times the example fell in the same leaf as the test example. A prediction is made using this weighted list of neighbors, using the relevant approach for the type of forest. In causal prediction, we calculate the treatment effect using the outcomes and treatment status of the neighbor examples. Those familiar with classic random forests might note that this approach differs from the way forest prediction is usually described. The traditional view is that to predict for a test example, each tree makes a prediction on that example. To make a final prediction, the tree predictions are combined in some way, for example through averaging or through 'majority voting'. It's worth noting that for regression forests, the GRF algorithm described above is identical this 'ensemble' approach, where each tree predicts by averaging the outcomes in each leaf, and predictions are combined through a weighted average.\n# Estimate treatment effects for the training data using out-of-bag prediction. tau.hat.oob = predict(tau.forest) res \u0026lt;- data.frame(df, pred = tau.hat.oob$predictions) ggplot(res, aes(x = X1, y = pred)) + geom_point() + geom_smooth() + geom_abline(intercept = 0, slope = 1) + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39;  ATE \u0026amp; ATT # Estimate the conditional average treatment effect on the full sample (CATE). average_treatment_effect(tau.forest, target.sample = \u0026quot;all\u0026quot;) ## estimate std.err ## 0.37316437 0.04795009 mean(res$TAU) ## [1] 0.4138061 # Estimate the conditional average treatment effect on the treated sample (CATT). # Here, we don\u0026#39;t expect much difference between the CATE and the CATT, since # treatment assignment was randomized. average_treatment_effect(tau.forest, target.sample = \u0026quot;treated\u0026quot;) ## estimate std.err ## 0.47051526 0.04850751 mean(res[res$W == 1,]$TAU) ## [1] 0.5010723  Fit more trees for CI's # Add confidence intervals for heterogeneous treatment effects; growing more # trees is now recommended. if(fullrun){ tau.forest_big = causal_forest(X, Y, W, num.trees = 4000) saveRDS(tau.forest_big, \u0026quot;s5.rds\u0026quot;) } else {tau.forest_big \u0026lt;- readRDS(\u0026quot;s5.rds\u0026quot;)}  Plot CI's ## PM #source(\u0026quot;CalcPosteriors.R\u0026quot;) df_res \u0026lt;- CalcPredictionsGRF(df, tau.forest_big) grfp \u0026lt;- ggplot(df_res, aes(x = X1, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-1,3.5) grfp ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39;  Fit BART on this dataset x.train \u0026lt;- model.matrix(~. ,data.frame(W, X)) x.test \u0026lt;- model.matrix(~. ,data.frame(W = 1 - W, X)) y.train \u0026lt;- Y if(fullrun){ bartFit \u0026lt;- bart(x.train, y.train, x.test, ntree = 2000, ndpost = 1000, nskip = 100) saveRDS(bartFit, \u0026quot;s10.rds\u0026quot;) } else {bartFit \u0026lt;- readRDS(\u0026quot;s10.rds\u0026quot;)} plot(bartFit)  BART: Check fit and CI's #source(\u0026quot;calcPosteriors.R\u0026quot;) sim \u0026lt;- CalcPosteriorsBART(df, bartFit, treatname = \u0026quot;W\u0026quot;) bartp \u0026lt;- ggplot(sim, aes(x = X1, qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-1,3.5) bartp ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39;  Compare gp \u0026lt;- plot_grid(bartp, grfp) ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; gp Here Grf appears more accurate. Mental note: Both W and TAU function of X1.\n  Dataset 4: Fit separate grf forests for Y and W This dataset has a complex propensity of treatment function (Exponential of X1 and X2), as well as hetergeneous treatment effect that is exponential function of X3. It has size N=4000.\n# In some examples, pre-fitting models for Y and W separately may # be helpful (e.g., if different models use different covariates). # In some applications, one may even want to get Y.hat and W.hat # using a completely different method (e.g., boosting). set.seed(123) # Generate new data. n = 4000; p = 20 X = matrix(rnorm(n * p), n, p) TAU = 1 / (1 + exp(-X[, 3])) W = rbinom(n ,1, 1 / (1 + exp(-X[, 1] - X[, 2]))) Y = pmax(X[, 2] + X[, 3], 0) + rowMeans(X[, 4:6]) / 2 + W * TAU + rnorm(n) df_sep4 \u0026lt;- data.frame(X, TAU, W, Y) Grf two-step: First fit model for W (PS) Regression forest to predict W from X. This is a propensity score.\nif(fullrun){ forest.W \u0026lt;- regression_forest(X, W, tune.parameters = c(\u0026quot;min.node.size\u0026quot;, \u0026quot;honesty.prune.leaves\u0026quot;), num.trees = 2000) saveRDS(forest.W, \u0026quot;s6.rds\u0026quot;) } else {forest.W \u0026lt;- readRDS(\u0026quot;s6.rds\u0026quot;)} W.hat = predict(forest.W)$predictions Grf:Then Fit model for Y, selecting covariates This predict Y from X, ignoring treatment.\nif(fullrun){ forest.Y = regression_forest(X, Y, tune.parameters = c(\u0026quot;min.node.size\u0026quot;, \u0026quot;honesty.prune.leaves\u0026quot;), num.trees = 2000) saveRDS(forest.Y, \u0026quot;s7.rds\u0026quot;) } else {forest.Y \u0026lt;- readRDS(\u0026quot;s7.rds\u0026quot;)} Y.hat = predict(forest.Y)$predictions  Grf:Select variables that predict Y. forest.Y.varimp = variable_importance(forest.Y) # Note: Forests may have a hard time when trained on very few variables # (e.g., ncol(X) = 1, 2, or 3). We recommend not being too aggressive # in selection. selected.vars = which(forest.Y.varimp / mean(forest.Y.varimp) \u0026gt; 0.2) This selects five variables of 20. Indeed these are the variables that were used to simulate Y.\n Grf: Finally, Fit causal forest using PS and selected covariates if(fullrun){ tau.forest2 = causal_forest(X[, selected.vars], Y, W, W.hat = W.hat, Y.hat = Y.hat, tune.parameters = c(\u0026quot;min.node.size\u0026quot;, \u0026quot;honesty.prune.leaves\u0026quot;), num.trees = 4000) saveRDS(tau.forest2, \u0026quot;s8.rds\u0026quot;) } else {tau.forest2 \u0026lt;- readRDS(\u0026quot;s8.rds\u0026quot;)}  Grf: Check fit and CI's df_sep2 \u0026lt;- CalcPredictionsGRF(df_sep4[,selected.vars], tau.forest2) grfp \u0026lt;- ggplot(df_sep2, aes(x = X3, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-0.7,2) grfp ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; This looks ok.\n  Fit BART on this dataset x.train \u0026lt;- model.matrix(~. ,data.frame(W, X)) x.test \u0026lt;- model.matrix(~. ,data.frame(W = 1 - W, X)) y.train \u0026lt;- Y if(fullrun){ bartFit \u0026lt;- bart(x.train, y.train, x.test, ntree = 4000) saveRDS(bartFit, \u0026quot;s9.rds\u0026quot;) } else {bartFit \u0026lt;- readRDS(\u0026quot;s9.rds\u0026quot;)} plot(bartFit)  BART: Check fit and CI's #source(\u0026quot;calcPosteriors.R\u0026quot;) sim \u0026lt;- CalcPosteriorsBART(df_sep4, bartFit, treatname = \u0026quot;W\u0026quot;) bartp \u0026lt;- ggplot(sim, aes(x = X3, qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-0.7,2) bartp ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39;  Compare BART and grf gp \u0026lt;- plot_grid(bartp, grfp) ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; ## `geom_smooth()` using method = \u0026#39;gam\u0026#39; and formula \u0026#39;y ~ s(x, bs = \u0026quot;cs\u0026quot;)\u0026#39; gp Very similar results. BART appears slightly more accurate, especially for low values of X3.\n  ","date":1544832000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544832000,"objectID":"5e61a0767e44f41cc719faa8702e5dae","permalink":"/post/bart_vs_grf/bart-vs-grf-showdown/","publishdate":"2018-12-15T00:00:00Z","relpermalink":"/post/bart_vs_grf/bart-vs-grf-showdown/","section":"post","summary":"In this post, we test both `Bayesian Additive Regression Trees (BART)` and `Causal forests (grf)` on four simulated datasets of increasing complexity. May the best method win!","tags":["causal inference","BART","grf"],"title":"BART vs Causal forests showdown","type":"post"},{"authors":null,"categories":["machine learning"],"content":"  The idea is that comparing the predictions of an RF model with the predictions of an OLS model can inform us in what ways the OLS model fails to capture all non-linearities and interactions between the predictors. Subsequently, using partial dependence plots of the RF model can guide the modelling of the non-linearities in the OLS model. After this step, the discrepancies between the RF predictions and the OLS predictions should be caused by non-modeled interactions. Using an RF to predict the discrepancy itself can then be used to discover which predictors are involved in these interactions. We test this method on the classic Boston Housing dataset to predict median house values (medv). We indeed recover interactions that, as it turns, have already been found and documented in the literature.\nLoad packages rm(list=ls()) #library(randomForest) #library(party) library(ranger) library(data.table) library(ggplot2) library(MASS) rdunif \u0026lt;- function(n,k) sample(1:k, n, replace = T)  Step 1: Run a RF on the Boston Housing set my_ranger \u0026lt;- ranger(medv ~ ., data = Boston, importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) Extract the permutation importance measure.\nmyres_tmp \u0026lt;- ranger::importance(my_ranger); myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)] ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip()  Fit an OLS to the Boston Housing my_glm \u0026lt;- glm(medv ~., data = Boston, family = \u0026quot;gaussian\u0026quot;)  Compare predictions of both models pred_RF \u0026lt;- predict(my_ranger, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1) # Run a RF on the discrepancy\nDiscrepancy is defined as the difference between the predictions of both models for each observation.\npred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_diff \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_diff ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## Splitrule: variance ## OOB prediction error (MSE): 5.151991 ## R squared (OOB): 0.6674631 It turns out the RF can \u0026quot;explain\u0026quot; 67% of these discrepancies.\nmyres_tmp \u0026lt;- ranger::importance(my_ranger_diff) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)] ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip() It turns out that rm and lstat are the variables that best predict the discrepancy.\nmy_glm_int \u0026lt;- glm(medv ~. + rm:lstat, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_int) ## ## Call: ## glm(formula = medv ~ . + rm:lstat, family = \u0026quot;gaussian\u0026quot;, data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -21.5738 -2.3319 -0.3584 1.8149 27.9558 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 6.073638 5.038175 1.206 0.228582 ## crim -0.157100 0.028808 -5.453 7.85e-08 *** ## zn 0.027199 0.012020 2.263 0.024083 * ## indus 0.052272 0.053475 0.978 0.328798 ## chas 2.051584 0.750060 2.735 0.006459 ** ## nox -15.051627 3.324807 -4.527 7.51e-06 *** ## rm 7.958907 0.488520 16.292 \u0026lt; 2e-16 *** ## age 0.013466 0.011518 1.169 0.242918 ## dis -1.120269 0.175498 -6.383 4.02e-10 *** ## rad 0.320355 0.057641 5.558 4.49e-08 *** ## tax -0.011968 0.003267 -3.664 0.000276 *** ## ptratio -0.721302 0.115093 -6.267 8.06e-10 *** ## black 0.003985 0.002371 1.681 0.093385 . ## lstat 1.844883 0.191833 9.617 \u0026lt; 2e-16 *** ## rm:lstat -0.418259 0.032955 -12.692 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 16.98987) ## ## Null deviance: 42716 on 505 degrees of freedom ## Residual deviance: 8342 on 491 degrees of freedom ## AIC: 2886 ## ## Number of Fisher Scoring iterations: 2 The interaction we have added is indeed highly significant.\nCompare approximate out-of-sample prediction accuracy using AIC:\nAIC(my_glm) ## [1] 3027.609 AIC(my_glm_int) ## [1] 2886.043 Indeed, the addition of the interaction greatly increases the prediction accuracy.\n Repeat this process pred_RF \u0026lt;- predict(my_ranger, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm_int, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1) pred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_diff2 \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_diff2 ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## Splitrule: variance ## OOB prediction error (MSE): 5.604118 ## R squared (OOB): 0.4399596 myres_tmp \u0026lt;- ranger::importance(my_ranger_diff2) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)] ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip() Now the variables that best predict the discrepancy are lstat and dis. Add these two variables as an interaction.\nmy_glm_int2 \u0026lt;- glm(medv ~. + rm:lstat + lstat:dis, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_int2) ## ## Call: ## glm(formula = medv ~ . + rm:lstat + lstat:dis, family = \u0026quot;gaussian\u0026quot;, ## data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -23.3918 -2.2997 -0.4077 1.6475 27.6766 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.552991 5.107295 0.304 0.761201 ## crim -0.139370 0.028788 -4.841 1.73e-06 *** ## zn 0.042984 0.012550 3.425 0.000667 *** ## indus 0.066690 0.052878 1.261 0.207834 ## chas 1.760779 0.743688 2.368 0.018290 * ## nox -11.544280 3.404577 -3.391 0.000753 *** ## rm 8.640503 0.513593 16.824 \u0026lt; 2e-16 *** ## age -0.002127 0.012067 -0.176 0.860140 ## dis -1.904982 0.268056 -7.107 4.22e-12 *** ## rad 0.304689 0.057000 5.345 1.39e-07 *** ## tax -0.011220 0.003228 -3.476 0.000554 *** ## ptratio -0.641380 0.115418 -5.557 4.51e-08 *** ## black 0.003756 0.002339 1.606 0.108924 ## lstat 1.925223 0.190368 10.113 \u0026lt; 2e-16 *** ## rm:lstat -0.466947 0.034897 -13.381 \u0026lt; 2e-16 *** ## dis:lstat 0.076716 0.020009 3.834 0.000143 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 16.52869) ## ## Null deviance: 42716.3 on 505 degrees of freedom ## Residual deviance: 8099.1 on 490 degrees of freedom ## AIC: 2873.1 ## ## Number of Fisher Scoring iterations: 2 AIC(my_glm_int2) ## [1] 2873.087 AIC(my_glm_int) ## [1] 2886.043 We conclude that the second interaction also results in significant model improvement.\n A more ambitious goal: Try and improve Harrison \u0026amp; Rubinfeld's model formula for Boston housing So far, we assumed that all relationships are linear. Harrison and Rubinfeld have created a model without interactions, but with transformations to correct for skewness, heteroskedasticity etc. Let's see if we can improve upon this model equation by applying our method to search for interactions. Their formula predicts log(medv).\n# Harrison and Rubinfeld (1978) model my_glm_hr \u0026lt;- glm(log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + tax + ptratio + black + I(black^2) + log(lstat) + crim + zn + indus + chas + I(nox^2), data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_hr) ## ## Call: ## glm(formula = log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + ## tax + ptratio + black + I(black^2) + log(lstat) + crim + ## zn + indus + chas + I(nox^2), family = \u0026quot;gaussian\u0026quot;, data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.73091 -0.09274 -0.00710 0.09800 0.78607 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.474e+00 1.579e-01 28.343 \u0026lt; 2e-16 *** ## I(rm^2) 6.634e-03 1.313e-03 5.053 6.15e-07 *** ## age 3.491e-05 5.245e-04 0.067 0.946950 ## log(dis) -1.927e-01 3.325e-02 -5.796 1.22e-08 *** ## log(rad) 9.613e-02 1.905e-02 5.047 6.35e-07 *** ## tax -4.295e-04 1.222e-04 -3.515 0.000481 *** ## ptratio -2.977e-02 5.024e-03 -5.926 5.85e-09 *** ## black 1.520e-03 5.068e-04 3.000 0.002833 ** ## I(black^2) -2.597e-06 1.114e-06 -2.331 0.020153 * ## log(lstat) -3.695e-01 2.491e-02 -14.833 \u0026lt; 2e-16 *** ## crim -1.157e-02 1.246e-03 -9.286 \u0026lt; 2e-16 *** ## zn 7.257e-05 5.034e-04 0.144 0.885430 ## indus -1.943e-04 2.360e-03 -0.082 0.934424 ## chas 9.180e-02 3.305e-02 2.777 0.005690 ** ## I(nox^2) -6.566e-01 1.129e-01 -5.815 1.09e-08 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 0.03299176) ## ## Null deviance: 84.376 on 505 degrees of freedom ## Residual deviance: 16.199 on 491 degrees of freedom ## AIC: -273.48 ## ## Number of Fisher Scoring iterations: 2 my_ranger_log \u0026lt;- ranger(log(medv) ~ ., data = Boston, importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) pred_RF \u0026lt;- predict(my_ranger_log, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm_hr, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1) For low predicted values both models differ in a systematic way. This suggests that there exists a remaining pattern that is picked up by RF but not by the OLS model.\npred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_log_diff \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_log_diff ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## Splitrule: variance ## OOB prediction error (MSE): 0.009132647 ## R squared (OOB): 0.5268126 The RF indicates that 54% of the discrepancy can be \u0026quot;explained\u0026quot; by RF.\nmyres_tmp \u0026lt;- ranger::importance(my_ranger_log_diff) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)] ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip() Add the top 2 vars as an interaction to their model equation.\nmy_glm_hr_int \u0026lt;- glm(log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + tax + ptratio + black + I(black^2) + log(lstat) + crim + zn + indus + chas + I(nox^2) + lstat:nox, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_hr_int) ## ## Call: ## glm(formula = log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + ## tax + ptratio + black + I(black^2) + log(lstat) + crim + ## zn + indus + chas + I(nox^2) + lstat:nox, family = \u0026quot;gaussian\u0026quot;, ## data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.70340 -0.09274 -0.00665 0.10068 0.75004 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.243e+00 1.613e-01 26.304 \u0026lt; 2e-16 *** ## I(rm^2) 7.053e-03 1.286e-03 5.484 6.66e-08 *** ## age -3.146e-04 5.174e-04 -0.608 0.54354 ## log(dis) -2.254e-01 3.317e-02 -6.795 3.15e-11 *** ## log(rad) 9.829e-02 1.862e-02 5.278 1.96e-07 *** ## tax -4.589e-04 1.196e-04 -3.838 0.00014 *** ## ptratio -2.990e-02 4.910e-03 -6.089 2.30e-09 *** ## black 1.445e-03 4.955e-04 2.917 0.00370 ** ## I(black^2) -2.470e-06 1.089e-06 -2.268 0.02376 * ## log(lstat) -2.143e-01 3.989e-02 -5.373 1.20e-07 *** ## crim -1.046e-02 1.238e-03 -8.448 3.40e-16 *** ## zn 7.309e-04 5.099e-04 1.434 0.15234 ## indus -8.166e-05 2.307e-03 -0.035 0.97178 ## chas 8.746e-02 3.231e-02 2.707 0.00704 ** ## I(nox^2) -3.618e-01 1.256e-01 -2.880 0.00415 ** ## lstat:nox -2.367e-02 4.819e-03 -4.911 1.24e-06 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 0.03150809) ## ## Null deviance: 84.376 on 505 degrees of freedom ## Residual deviance: 15.439 on 490 degrees of freedom ## AIC: -295.79 ## ## Number of Fisher Scoring iterations: 2 AIC(my_glm_hr) ## [1] -273.4788 AIC(my_glm_hr_int) ## [1] -295.7931 This results in a significant improvement!\n Repeat this procedure pred_RF \u0026lt;- predict(my_ranger_log, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm_hr_int, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1) pred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_log_diff2 \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_log_diff2 ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## Splitrule: variance ## OOB prediction error (MSE): 0.008653356 ## R squared (OOB): 0.5201821 myres_tmp \u0026lt;- ranger::importance(my_ranger_log_diff2) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)] ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip() Now we add lstat and dis as an interaction.\nmy_glm_hr_int2 \u0026lt;- glm(log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + tax + ptratio + black + I(black^2) + log(lstat) + crim + zn + indus + chas + I(nox^2) + lstat:nox + lstat:dis, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_hr_int2) ## ## Call: ## glm(formula = log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + ## tax + ptratio + black + I(black^2) + log(lstat) + crim + ## zn + indus + chas + I(nox^2) + lstat:nox + lstat:dis, family = \u0026quot;gaussian\u0026quot;, ## data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.70136 -0.08746 -0.00589 0.08857 0.76349 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.535e+00 1.712e-01 26.481 \u0026lt; 2e-16 *** ## I(rm^2) 7.498e-03 1.266e-03 5.924 5.94e-09 *** ## age -1.262e-03 5.504e-04 -2.293 0.02226 * ## log(dis) -4.065e-01 5.203e-02 -7.813 3.43e-14 *** ## log(rad) 9.668e-02 1.828e-02 5.290 1.85e-07 *** ## tax -4.622e-04 1.173e-04 -3.940 9.35e-05 *** ## ptratio -2.640e-02 4.881e-03 -5.409 9.93e-08 *** ## black 1.313e-03 4.871e-04 2.696 0.00727 ** ## I(black^2) -2.172e-06 1.071e-06 -2.029 0.04303 * ## log(lstat) -3.181e-01 4.553e-02 -6.987 9.23e-12 *** ## crim -1.049e-02 1.215e-03 -8.635 \u0026lt; 2e-16 *** ## zn 9.078e-04 5.019e-04 1.809 0.07108 . ## indus -2.733e-04 2.264e-03 -0.121 0.90395 ## chas 7.166e-02 3.191e-02 2.246 0.02515 * ## I(nox^2) -2.569e-01 1.255e-01 -2.048 0.04113 * ## lstat:nox -2.729e-02 4.798e-03 -5.689 2.21e-08 *** ## lstat:dis 3.906e-03 8.754e-04 4.462 1.01e-05 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 0.03033711) ## ## Null deviance: 84.376 on 505 degrees of freedom ## Residual deviance: 14.835 on 489 degrees of freedom ## AIC: -313.99 ## ## Number of Fisher Scoring iterations: 2 AIC(my_glm_hr_int2) ## [1] -313.9904 AIC(my_glm_hr_int) ## [1] -295.7931 And again we find an improvement in model fit.\n Have these interactions already been reported on in the literature? Tom Minka reports on his website an analysis of interactions in the Boston Housing set:\n(http://alumni.media.mit.edu/~tpminka/courses/36-350.2001/lectures/day30/) \u0026gt; summary(fit3) Coefficients: Estimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) -227.5485 49.2363 -4.622 4.87e-06 *** lstat 50.8553 20.3184 2.503 0.012639 * rm 38.1245 7.0987 5.371 1.21e-07 *** dis -16.8163 2.9174 -5.764 1.45e-08 *** ptratio 14.9592 2.5847 5.788 1.27e-08 *** lstat:rm -6.8143 3.1209 -2.183 0.029475 * lstat:dis 4.8736 1.3940 3.496 0.000514 *** lstat:ptratio -3.3209 1.0345 -3.210 0.001412 ** rm:dis 2.0295 0.4435 4.576 5.99e-06 *** rm:ptratio -1.9911 0.3757 -5.299 1.76e-07 *** lstat:rm:dis -0.5216 0.2242 -2.327 0.020364 * lstat:rm:ptratio 0.3368 0.1588 2.121 0.034423 *\nRob mcCulloch, using BART (bayesian additive regression trees) also examines interactions in the Boston Housing data. There the co-occurence within trees is used to discover interactions:\nThe second, interaction detection, uncovers which pairs of variables interact in analogous fashion by keeping track of the percentage of trees in the sum in which both variables occur. This exploits the fact that a sum-of-trees model captures an interaction between xi and xj by using them both for splitting rules in the same tree.\nhttp://www.rob-mcculloch.org/some_papers_and_talks/papers/working/cgm_as.pdf\n  Conclusion We conclude that this appears a fruitfull approach to at least discovering where a regression model can be improved.\n ","date":1504224000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1504224000,"objectID":"f6e1d7cb765b378e9f12194e8cd7fa31","permalink":"/post/interaction_detection/interaction-detection/","publishdate":"2017-09-01T00:00:00Z","relpermalink":"/post/interaction_detection/interaction-detection/","section":"post","summary":"In this post, I explore how we can improve a parametric regression model by comparing its predictions to those of a Random Forest model. This might informs us in what ways the OLS model fails to capture all non-linearities and interactions between the predictors.","tags":["interaction detection","random forest","ranger"],"title":"Improving a parametric regression model using machine learning","type":"post"}]