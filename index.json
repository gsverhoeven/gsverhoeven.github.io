[{"authors":[],"categories":[],"content":" Load packages # library(devtools) #devtools::install_github(\u0026quot;vdorie/dbarts\u0026quot;) library(dbarts) library(ggplot2)  ## Warning: package 'ggplot2' was built under R version 3.4.4  library(tidyverse)  ## Warning: package 'tidyverse' was built under R version 3.4.4  ## -- Attaching packages ---------------------------------- tidyverse 1.2.1 --  ## v tibble 1.4.2 v purrr 0.2.4 ## v tidyr 0.8.1 v dplyr 0.7.5 ## v readr 1.1.1 v stringr 1.3.1 ## v tibble 1.4.2 v forcats 0.3.0  ## Warning: package 'tibble' was built under R version 3.4.4  ## Warning: package 'tidyr' was built under R version 3.4.4  ## Warning: package 'readr' was built under R version 3.4.4  ## Warning: package 'purrr' was built under R version 3.4.4  ## Warning: package 'dplyr' was built under R version 3.4.4  ## Warning: package 'stringr' was built under R version 3.4.4  ## Warning: package 'forcats' was built under R version 3.4.4  ## -- Conflicts ------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag()  library(grf)  ## Warning: package 'grf' was built under R version 3.4.4  #devtools::install_github(\u0026quot;vdorie/aciccomp/2017\u0026quot;) library(aciccomp2017) library(cowplot)  ## Warning: package 'cowplot' was built under R version 3.4.4  ## ## Attaching package: 'cowplot'  ## The following object is masked from 'package:ggplot2': ## ## ggsave  source(\u0026quot;calcPosteriors.R\u0026quot;) fullrun \u0026lt;- 0  Dataset 1: Simulated dataset from Friedman MARS paper This is not a causal problem but a prediction problem.\n## y = f(x) + epsilon , epsilon ~ N(0, sigma) ## x consists of 10 variables, only first 5 matter f \u0026lt;- function(x) { 10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3] - 0.5)^2 + 10 * x[,4] + 5 * x[,5] } set.seed(99) sigma \u0026lt;- 1.0 n \u0026lt;- 100 x \u0026lt;- matrix(runif(n * 10), n, 10) Ey \u0026lt;- f(x) y \u0026lt;- rnorm(n, Ey, sigma) df \u0026lt;- data.frame(x, y, y_true = Ey)  fit BART model on simulated Friedman data if(fullrun){ ## run BART set.seed(99) bartFit \u0026lt;- bart(x, y) saveRDS(bartFit, \u0026quot;s1.rds\u0026quot;) } else { bartFit \u0026lt;- readRDS(\u0026quot;s1.rds\u0026quot;)} plot(bartFit)  MCMC or sigma looks ok.\ncompare BART fit to true values df2 \u0026lt;- data.frame(df, ql = apply(bartFit$yhat.train, length(dim(bartFit$yhat.train)), quantile,probs=0.05), qm = apply(bartFit$yhat.train, length(dim(bartFit$yhat.train)), quantile,probs=.5), qu \u0026lt;- apply(bartFit$yhat.train, length(dim(bartFit$yhat.train)), quantile,probs=0.95) ) bartp \u0026lt;- ggplot(df2, aes(x= y, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_abline(intercept = 0, slope = 1, col = \u0026quot;red\u0026quot;, size = 1) bartp  ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'  This looks nice.\nFit Grf regression forest on Friedman data From the manual: Trains a regression forest that can be used to estimate the conditional mean function mu(x) = E[Y | X = x]\nif(fullrun){ reg.forest = regression_forest(x, y, num.trees = 2000) saveRDS(reg.forest, \u0026quot;s00.rds\u0026quot;) } else {reg.forest \u0026lt;- readRDS(\u0026quot;s00.rds\u0026quot;)}  df3 \u0026lt;- CalcPredictionsGRF(x, reg.forest)  ## Warning: package 'bindrcpp' was built under R version 3.4.4  df3 \u0026lt;- data.frame(df3, y) ggplot(df3, aes(x= y, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_abline(intercept = 0, slope = 1, col = \u0026quot;red\u0026quot;, size = 1)  This is pretty bad compared to BART. What\u0026rsquo;s wrong here?\nFrom reference.md: GRF isn\u0026rsquo;t working well on a small dataset\nIf you observe poor performance on a dataset with a small number of examples, it may be worth trying out two changes:\n Disabling honesty. As noted in the section on honesty above, when honesty is enabled, the training subsample is further split in half before performing splitting. This may not leave enough information for the algorithm to determine high-quality splits.  Skipping the variance estimate computation, by setting ci.group.size to 1 during training, then increasing sample.fraction. Because of how variance estimation is implemented, sample.fraction cannot be greater than 0.5 when it is enabled. If variance estimates are not needed, it may help to disable this computation and use a larger subsample size for training.   Dataset is pretty small (n=100). Maybe turn of honesty? We cannot turn off variance estimate computation, because we want the CI\u0026rsquo;s\nif(fullrun){ reg.forest2 = regression_forest(x, y, num.trees = 2000, honesty = FALSE) saveRDS(reg.forest2, \u0026quot;s001.rds\u0026quot;) } else {reg.forest2 \u0026lt;- readRDS(\u0026quot;s001.rds\u0026quot;)}  df2 \u0026lt;- CalcPredictionsGRF(x, reg.forest2) df2 \u0026lt;- data.frame(df2, y) grfp \u0026lt;- ggplot(df2, aes(x= y, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_abline(intercept = 0, slope = 1, col = \u0026quot;red\u0026quot;, size = 1) grfp  ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'  Ah! better now. But Grf still worse than BART. We ran with 2000 trees and turned of honesty. Perhaps dataset too small? Maybe check out the sample.fraction parameter? Sample.fraction is set by default at 0.5, so only half of data is used to grow tree. OR use tune.parameters = TRUE\nCompare methods gp \u0026lt;- plot_grid(bartp, grfp)  ## `geom_smooth()` using method = 'loess' and formula 'y ~ x' ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'  gp  Dataset 2: Simulated data from ACIC 2017 This is a bigger dataset, N=4302.\n Treatment effect $\\tau$ is a function of covariates x3, x24, x14, x15 Probability of treatment $\\pi$ is a function of covariates x1, x43, x10. Outcome is a function of x43 Noise is a function of x21  head(input_2017[, c(3,24,14,15)])  ## x_3 x_24 x_14 x_15 ## 1 20 white 0 2 ## 2 0 black 0 0 ## 3 0 white 0 1 ## 4 10 white 0 0 ## 5 0 black 0 0 ## 6 1 white 0 0  Check transformed covariates used to create simulated datasets.\n# zit hidden in package head(aciccomp2017:::transformedData_2017)  ## x_1 x_3 x_10 x_14 x_15 x_21 x_24 x_43 ## 2665 -1.18689448 gt_0 leq_0 leq_0 gt_0 J E -1.0897971 ## 22 -0.04543705 leq_0 leq_0 leq_0 leq_0 J B 1.1223750 ## 2416 0.13675482 leq_0 leq_0 leq_0 gt_0 J E 0.6136700 ## 1350 -0.24062700 gt_0 leq_0 leq_0 leq_0 J E -0.2995632 ## 3850 1.02054653 leq_0 leq_0 leq_0 leq_0 I B 0.6136700 ## 4167 -1.18689448 gt_0 leq_0 leq_0 leq_0 K E -1.5961206  So we find that we should not take the functions in Dorie 2018 (debrief.pdf) literately. x_3 used to calculate the treatment effect is derived from x_3 in the input data. x_24 used to calculate the treatment effect is derived from x_24 in the input data. Both have become binary variables.\nTurns out that this was a feature of the 2016 ACIC and IS mentioned in the debrief.pdf\nWe pick the iid, strong signal, low noise, low confounding first. Actually from estimated PS (W.hat) it seems that every obs has probability of treatment 50%.\nparameters_2017[21,]  ## errors magnitude noise confounding ## 21 iid 1 0 0  # easiest?  Grab the first replicate.\nsim \u0026lt;- dgp_2017(21, 1)  Fit BART to ACIC 2017 dataset Need also counterfactual predictions. Most efficient seems to create x.test with Z reversed. This will give use a y.test as well as y.train in the output. We expect draws for both. Plotting a histogram of the difference gives us the treatment effect with uncertainty.\nFrom the MCMC draws for sigma we infer that we need to drop more \u0026ldquo;burn in\u0026rdquo; samples.\nPrepare data for BART, including x.test with treatment reversed:\n# combine x and y y \u0026lt;- sim$y x \u0026lt;- model.matrix(~. ,cbind(z = sim$z, input_2017)) # flip z for counterfactual predictions (needed for BART) x.test \u0026lt;- model.matrix(~. ,cbind(z = 1 - sim$z, input_2017))  ## run BART fullrun \u0026lt;- 0 if(fullrun){ set.seed(99) bartFit \u0026lt;- bart(x, y, x.test, nskip = 350, ntree = 1000) saveRDS(bartFit, \u0026quot;s2.rds\u0026quot;) } else { bartFit \u0026lt;- readRDS(\u0026quot;s2.rds\u0026quot;)} plot(bartFit)  Extract individual treatment effect (ITE / CATE) plus uncertainty from bartfit This means switching z from 0 to 1 and looking at difference in y + uncertainty in y.\nsource(\u0026quot;calcPosteriors.R\u0026quot;) sim \u0026lt;- CalcPosteriorsBART(sim, bartFit, \u0026quot;z\u0026quot;) sim \u0026lt;- sim %\u0026gt;% arrange(alpha) bartp \u0026lt;- ggplot(sim, aes(x = 1:nrow(sim), qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_point(aes(y = alpha), col = \u0026quot;red\u0026quot;) + ylim(-2.5, 4.5) bartp  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  ## Warning: Removed 1 rows containing missing values (geom_smooth).  This looks sort of ok, but still weird. Some points it gets REALLY wrong.\nCalculate coverage sim \u0026lt;- sim %\u0026gt;% mutate(in_ci = ql \u0026lt; alpha \u0026amp; qu \u0026gt; alpha) mean(sim$in_ci)  ## [1] 0.4363087  Pretty bad coverage. Look into whats going on here. Here it should be 0.9\nThe iid plot for method 2 gives coverage 0.7 (where it should be 0.95)\nCalculate RMSE of CATE sqrt(mean((sim$alpha - sim$ite)^2))  ## [1] 0.1587338  For All i.i.d. (averaged over 250 replicates averaged over 8 scenarios) method 2 (BART should have RMSE of CATE of 0.35-0.4)\nFit grf to ACIC 2017 dataset need large num.trees for CI.\n# prep data for Grf # combine x and y sim \u0026lt;- dgp_2017(21, 1) Y \u0026lt;- sim$y X \u0026lt;- model.matrix(~. ,input_2017) W = sim$z # Train a causal forest. fullrun \u0026lt;- 0 if(fullrun){ grf.fit_alt \u0026lt;- causal_forest(X, Y, W, num.trees = 500) saveRDS(grf.fit_alt, \u0026quot;s3.rds\u0026quot;) } else{grf.fit_alt \u0026lt;- readRDS(\u0026quot;s3.rds\u0026quot;)}  It appears that using 4000 trees consumes too much memory (bad_alloc)\nCompare predictions vs true value df_sep2 \u0026lt;- CalcPredictionsGRF(X, grf.fit_alt) df_sep2 \u0026lt;- data.frame(df_sep2, Y, W, TAU = sim$alpha) df_sep2 \u0026lt;- df_sep2 %\u0026gt;% arrange(TAU) grfp \u0026lt;- ggplot(df_sep2, aes(x = 1:nrow(df_sep2), y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_point(aes(y = TAU), col = \u0026quot;red\u0026quot;) + ylim(-2.5, 4.5) grfp  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  This works ok now.\nCompare both methods gp \u0026lt;- plot_grid(bartp, grfp)  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  ## Warning: Removed 1 rows containing missing values (geom_smooth).  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  gp  Dataset 3: simulated data used by grf example THis dataset is used in the Grf manual page. Size N = 2000. Probability of treatment function of X1. Treatment effect function of X1.\n# Generate data. set.seed(123) n = 2000; p = 10 X = matrix(rnorm(n*p), n, p) # treatment W = rbinom(n, 1, 0.4 + 0.2 * (X[,1] \u0026gt; 0)) # outcome (parallel max) Y = pmax(X[,1], 0) * W + X[,2] + pmin(X[,3], 0) + rnorm(n) # TAU is true treatment effect df \u0026lt;- data.frame(X, W, Y, TAU = pmax(X[,1], 0))  Fit GRF Default settings are honesty = TRUE.\n# Train a causal forest. if(fullrun){ tau.forest = causal_forest(X, Y, W, num.trees = 2000) saveRDS(tau.forest, \u0026quot;s4.rds\u0026quot;) } else {tau.forest \u0026lt;- readRDS(\u0026quot;s4.rds\u0026quot;)}  OOB predictions From the GRF manual:\nGiven a test example, the GRF algorithm computes a prediction as follows:\nFor each tree, the test example is 'pushed down' to determine what leaf it falls in. Given this information, we create a list of neighboring training examples, weighted by how many times the example fell in the same leaf as the test example. A prediction is made using this weighted list of neighbors, using the relevant approach for the type of forest. In causal prediction, we calculate the treatment effect using the outcomes and treatment status of the neighbor examples.  Those familiar with classic random forests might note that this approach differs from the way forest prediction is usually described. The traditional view is that to predict for a test example, each tree makes a prediction on that example. To make a final prediction, the tree predictions are combined in some way, for example through averaging or through \u0026lsquo;majority voting\u0026rsquo;. It\u0026rsquo;s worth noting that for regression forests, the GRF algorithm described above is identical this \u0026lsquo;ensemble\u0026rsquo; approach, where each tree predicts by averaging the outcomes in each leaf, and predictions are combined through a weighted average.\n# Estimate treatment effects for the training data using out-of-bag prediction. tau.hat.oob = predict(tau.forest) res \u0026lt;- data.frame(df, pred = tau.hat.oob$predictions) ggplot(res, aes(x = X1, y = pred)) + geom_point() + geom_smooth() + geom_abline(intercept = 0, slope = 1) + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1)  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  ATE \u0026amp; ATT # Estimate the conditional average treatment effect on the full sample (CATE). average_treatment_effect(tau.forest, target.sample = \u0026quot;all\u0026quot;)  ## estimate std.err ## 0.36664140 0.04796884  mean(res$TAU)  ## [1] 0.4138061  # Estimate the conditional average treatment effect on the treated sample (CATT). # Here, we don't expect much difference between the CATE and the CATT, since # treatment assignment was randomized. average_treatment_effect(tau.forest, target.sample = \u0026quot;treated\u0026quot;)  ## estimate std.err ## 0.45860274 0.04852209  mean(res[res$W == 1,]$TAU)  ## [1] 0.5010723  Fit more trees for CI\u0026rsquo;s # Add confidence intervals for heterogeneous treatment effects; growing more # trees is now recommended. if(fullrun){ tau.forest_big = causal_forest(X, Y, W, num.trees = 4000) saveRDS(tau.forest_big, \u0026quot;s5.rds\u0026quot;) } else {tau.forest_big \u0026lt;- readRDS(\u0026quot;s5.rds\u0026quot;)}  Plot CI\u0026rsquo;s ## PM source(\u0026quot;CalcPosteriors.R\u0026quot;) df_res \u0026lt;- CalcPredictionsGRF(df, tau.forest_big) grfp \u0026lt;- ggplot(df_res, aes(x = X1, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-1,3.5) grfp  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  Fit BART on this dataset x.train \u0026lt;- model.matrix(~. ,data.frame(W, X)) x.test \u0026lt;- model.matrix(~. ,data.frame(W = 1 - W, X)) y.train \u0026lt;- Y if(fullrun){ bartFit \u0026lt;- bart(x.train, y.train, x.test, ntree = 2000, ndpost = 1000, nskip = 100) saveRDS(bartFit, \u0026quot;s10.rds\u0026quot;) } else {bartFit \u0026lt;- readRDS(\u0026quot;s10.rds\u0026quot;)} plot(bartFit)  BART: Check fit and CI\u0026rsquo;s source(\u0026quot;calcPosteriors.R\u0026quot;) sim \u0026lt;- CalcPosteriorsBART(df, bartFit, treatname = \u0026quot;W\u0026quot;) bartp \u0026lt;- ggplot(sim, aes(x = X1, qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-1,3.5) bartp  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  Compare gp \u0026lt;- plot_grid(bartp, grfp)  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)' ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  gp  Here Grf appears more accurate. Mental note: Both W and TAU function of X1.\nDataset 4: Fit separate grf forests for Y and W This dataset has a complex propensity of treatment function (Exponential of X1 and X2), as well as hetergeneous treatment effect that is exponential function of X3. It has size N=4000.\n# In some examples, pre-fitting models for Y and W separately may # be helpful (e.g., if different models use different covariates). # In some applications, one may even want to get Y.hat and W.hat # using a completely different method (e.g., boosting). set.seed(123) # Generate new data. n = 4000; p = 20 X = matrix(rnorm(n * p), n, p) TAU = 1 / (1 + exp(-X[, 3])) W = rbinom(n ,1, 1 / (1 + exp(-X[, 1] - X[, 2]))) Y = pmax(X[, 2] + X[, 3], 0) + rowMeans(X[, 4:6]) / 2 + W * TAU + rnorm(n) df_sep4 \u0026lt;- data.frame(X, TAU, W, Y)  Grf two-step: First fit model for W (PS) Regression forest to predict W from X. This is a propensity score.\nif(fullrun){ forest.W = regression_forest(X, W, tune.parameters = TRUE, num.trees = 2000) saveRDS(forest.W, \u0026quot;s6.rds\u0026quot;) } else {forest.W \u0026lt;- readRDS(\u0026quot;s6.rds\u0026quot;)} W.hat = predict(forest.W)$predictions  Grf:Then Fit model for Y, selecting covariates This predict Y from X, ignoring treatment.\nif(fullrun){ forest.Y = regression_forest(X, Y, tune.parameters = TRUE, num.trees = 2000) saveRDS(forest.Y, \u0026quot;s7.rds\u0026quot;) } else {forest.Y \u0026lt;- readRDS(\u0026quot;s7.rds\u0026quot;)} Y.hat = predict(forest.Y)$predictions  Grf:Select variables that predict Y. forest.Y.varimp = variable_importance(forest.Y) # Note: Forests may have a hard time when trained on very few variables # (e.g., ncol(X) = 1, 2, or 3). We recommend not being too aggressive # in selection. selected.vars = which(forest.Y.varimp / mean(forest.Y.varimp) \u0026gt; 0.2)  This selects five variables of 20. Indeed these are the variables that were used to simulate Y.\nGrf: Finally, Fit causal forest using PS and selected covariates if(fullrun){ tau.forest2 = causal_forest(X[, selected.vars], Y, W, W.hat = W.hat, Y.hat = Y.hat, tune.parameters = TRUE, num.trees = 4000) saveRDS(tau.forest2, \u0026quot;s8.rds\u0026quot;) } else {tau.forest2 \u0026lt;- readRDS(\u0026quot;s8.rds\u0026quot;)}  Grf: Check fit and CI\u0026rsquo;s df_sep2 \u0026lt;- CalcPredictionsGRF(df_sep4, tau.forest2) grfp \u0026lt;- ggplot(df_sep2, aes(x = X3, y = qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-0.7,2) grfp  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  This looks ok.\nFit BART on this dataset x.train \u0026lt;- model.matrix(~. ,data.frame(W, X)) x.test \u0026lt;- model.matrix(~. ,data.frame(W = 1 - W, X)) y.train \u0026lt;- Y if(fullrun){ bartFit \u0026lt;- bart(x.train, y.train, x.test, ntree = 4000) saveRDS(bartFit, \u0026quot;s9.rds\u0026quot;) } else {bartFit \u0026lt;- readRDS(\u0026quot;s9.rds\u0026quot;)} plot(bartFit)  BART: Check fit and CI\u0026rsquo;s source(\u0026quot;calcPosteriors.R\u0026quot;) sim \u0026lt;- CalcPosteriorsBART(df_sep4, bartFit, treatname = \u0026quot;W\u0026quot;) bartp \u0026lt;- ggplot(sim, aes(x = X3, qm)) + geom_linerange(aes(ymin = ql, ymax = qu), col = \u0026quot;grey\u0026quot;) + geom_point() + geom_smooth() + geom_line(aes(y = TAU), col = \u0026quot;red\u0026quot;, size = 1) + ylim(-0.7,2) bartp  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  Compare BART and grf gp \u0026lt;- plot_grid(bartp, grfp)  ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)' ## `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'  gp  Very similar results. BART appears slightly more accurate, especially for low values of X3.\n","date":1545778800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545778800,"objectID":"140b6dd028869ea9b74f3b187aa7e7f0","permalink":"https://gsverhoeven.github.io/post/bart_vs_grf/","publishdate":"2018-12-26T00:00:00+01:00","relpermalink":"/post/bart_vs_grf/","section":"post","summary":"Load packages # library(devtools) #devtools::install_github(\u0026quot;vdorie/dbarts\u0026quot;) library(dbarts) library(ggplot2)  ## Warning: package 'ggplot2' was built under R version 3.4.4  library(tidyverse)  ## Warning: package 'tidyverse' was built under R version 3.4.4  ## -- Attaching packages ---------------------------------- tidyverse 1.2.1 --  ## v tibble 1.4.2 v purrr 0.2.4 ## v tidyr 0.8.1 v dplyr 0.7.5 ## v readr 1.1.1 v stringr 1.3.1 ## v tibble 1.4.2 v forcats 0.3.0  ## Warning: package 'tibble' was built under R version 3.","tags":[],"title":"BART vs Grf showdown","type":"post"},{"authors":null,"categories":[],"content":"Comparing the predictions of a Random Forest model with the predictions of an Linear Regression model can inform us in what ways the OLS model can be improved. Here we explore the feasibility of this approach by modelling the classic Boston Housing dataset.\nAn OLS with only main variables fails to capture all non-linearities and interactions between the predictors. Subsequently, using partial dependence plots of the RF model can guide the modelling of the non-linearities in the OLS model. After this step, the discrepancies between the RF predictions and the OLS predictions should be caused by non-modeled interactions. Using an RF to predict the discrepancy itself can then be used to discover which predictors are involved in these interactions. We test this method on the classic Boston Housing dataset to predict median house values (medv). We indeed recover interactions that, as it turns, have already been found and documented in the literature.\nLoad packages rm(list=ls()) library(randomForest) library(party) library(ranger) library(data.table) library(ggplot2) library(MASS) rdunif \u0026lt;- function(n,k) sample(1:k, n, replace = T)  Step 1: Run a RF on the Boston Housing set my_ranger \u0026lt;- ranger(medv ~ ., data = Boston, importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE)  Extract the permutation importance measure.\nmyres_tmp \u0026lt;- ranger::importance(my_ranger); myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)]  ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip()  Fit an OLS to the Boston Housing my_glm \u0026lt;- glm(medv ~., data = Boston, family = \u0026quot;gaussian\u0026quot;)  Compare predictions of both models pred_RF \u0026lt;- predict(my_ranger, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1)  Run a RF on the discrepancy Discrepancy is defined as the difference between the predictions of both models for each observation.\npred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_diff \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_diff  ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## OOB prediction error (MSE): 5.17264 ## R squared (OOB): 0.6617633  It turns out the RF can \u0026ldquo;explain\u0026rdquo; 67% of these discrepancies.\nmyres_tmp \u0026lt;- ranger::importance(my_ranger_diff) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)]  ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip()  It turns out that rm and lstat are the variables that best predict the discrepancy.\nmy_glm_int \u0026lt;- glm(medv ~. + rm:lstat, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_int)  ## ## Call: ## glm(formula = medv ~ . + rm:lstat, family = \u0026quot;gaussian\u0026quot;, data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -21.5738 -2.3319 -0.3584 1.8149 27.9558 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 6.073638 5.038175 1.206 0.228582 ## crim -0.157100 0.028808 -5.453 7.85e-08 *** ## zn 0.027199 0.012020 2.263 0.024083 * ## indus 0.052272 0.053475 0.978 0.328798 ## chas 2.051584 0.750060 2.735 0.006459 ** ## nox -15.051627 3.324807 -4.527 7.51e-06 *** ## rm 7.958907 0.488520 16.292 \u0026lt; 2e-16 *** ## age 0.013466 0.011518 1.169 0.242918 ## dis -1.120269 0.175498 -6.383 4.02e-10 *** ## rad 0.320355 0.057641 5.558 4.49e-08 *** ## tax -0.011968 0.003267 -3.664 0.000276 *** ## ptratio -0.721302 0.115093 -6.267 8.06e-10 *** ## black 0.003985 0.002371 1.681 0.093385 . ## lstat 1.844883 0.191833 9.617 \u0026lt; 2e-16 *** ## rm:lstat -0.418259 0.032955 -12.692 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## (Dispersion parameter for gaussian family taken to be 16.98987) ## ## Null deviance: 42716 on 505 degrees of freedom ## Residual deviance: 8342 on 491 degrees of freedom ## AIC: 2886 ## ## Number of Fisher Scoring iterations: 2  The interaction we have added is indeed highly significant.\nCompare approximate out-of-sample prediction accuracy using AIC:\nAIC(my_glm)  ## [1] 3027.609  AIC(my_glm_int)  ## [1] 2886.043  Indeed, the addition of the interaction greatly increases the prediction accuracy.\nRepeat this process pred_RF \u0026lt;- predict(my_ranger, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm_int, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1)  pred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_diff2 \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_diff2  ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## OOB prediction error (MSE): 5.570852 ## R squared (OOB): 0.4375935  myres_tmp \u0026lt;- ranger::importance(my_ranger_diff2) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)]  ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip()  Now the variables that best predict the discrepancy are lstat and dis. Add these two variables as an interaction.\nmy_glm_int2 \u0026lt;- glm(medv ~. + rm:lstat + lstat:dis, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_int2)  ## ## Call: ## glm(formula = medv ~ . + rm:lstat + lstat:dis, family = \u0026quot;gaussian\u0026quot;, ## data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -23.3918 -2.2997 -0.4077 1.6475 27.6766 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 1.552991 5.107295 0.304 0.761201 ## crim -0.139370 0.028788 -4.841 1.73e-06 *** ## zn 0.042984 0.012550 3.425 0.000667 *** ## indus 0.066690 0.052878 1.261 0.207834 ## chas 1.760779 0.743688 2.368 0.018290 * ## nox -11.544280 3.404577 -3.391 0.000753 *** ## rm 8.640503 0.513593 16.824 \u0026lt; 2e-16 *** ## age -0.002127 0.012067 -0.176 0.860140 ## dis -1.904982 0.268056 -7.107 4.22e-12 *** ## rad 0.304689 0.057000 5.345 1.39e-07 *** ## tax -0.011220 0.003228 -3.476 0.000554 *** ## ptratio -0.641380 0.115418 -5.557 4.51e-08 *** ## black 0.003756 0.002339 1.606 0.108924 ## lstat 1.925223 0.190368 10.113 \u0026lt; 2e-16 *** ## rm:lstat -0.466947 0.034897 -13.381 \u0026lt; 2e-16 *** ## dis:lstat 0.076716 0.020009 3.834 0.000143 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## (Dispersion parameter for gaussian family taken to be 16.52869) ## ## Null deviance: 42716.3 on 505 degrees of freedom ## Residual deviance: 8099.1 on 490 degrees of freedom ## AIC: 2873.1 ## ## Number of Fisher Scoring iterations: 2  AIC(my_glm_int2)  ## [1] 2873.087  AIC(my_glm_int)  ## [1] 2886.043  We conclude that the second interaction also results in significant model improvement.\nA more ambitious goal: Try and improve Harrison \u0026amp; Rubinfeld\u0026rsquo;s model formula for Boston housing So far, we assumed that all relationships are linear. Harrison and Rubinfeld have created a model without interactions, but with transformations to correct for skewness, heteroskedasticity etc. Let\u0026rsquo;s see if we can improve upon this model equation by applying our method to search for interactions. Their formula predicts log(medv).\n# Harrison and Rubinfeld (1978) model my_glm_hr \u0026lt;- glm(log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + tax + ptratio + black + I(black^2) + log(lstat) + crim + zn + indus + chas + I(nox^2), data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_hr)  ## ## Call: ## glm(formula = log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + ## tax + ptratio + black + I(black^2) + log(lstat) + crim + ## zn + indus + chas + I(nox^2), family = \u0026quot;gaussian\u0026quot;, data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.73091 -0.09274 -0.00710 0.09800 0.78607 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.474e+00 1.579e-01 28.343 \u0026lt; 2e-16 *** ## I(rm^2) 6.634e-03 1.313e-03 5.053 6.15e-07 *** ## age 3.491e-05 5.245e-04 0.067 0.946950 ## log(dis) -1.927e-01 3.325e-02 -5.796 1.22e-08 *** ## log(rad) 9.613e-02 1.905e-02 5.047 6.35e-07 *** ## tax -4.295e-04 1.222e-04 -3.515 0.000481 *** ## ptratio -2.977e-02 5.024e-03 -5.926 5.85e-09 *** ## black 1.520e-03 5.068e-04 3.000 0.002833 ** ## I(black^2) -2.597e-06 1.114e-06 -2.331 0.020153 * ## log(lstat) -3.695e-01 2.491e-02 -14.833 \u0026lt; 2e-16 *** ## crim -1.157e-02 1.246e-03 -9.286 \u0026lt; 2e-16 *** ## zn 7.257e-05 5.034e-04 0.144 0.885430 ## indus -1.943e-04 2.360e-03 -0.082 0.934424 ## chas 9.180e-02 3.305e-02 2.777 0.005690 ** ## I(nox^2) -6.566e-01 1.129e-01 -5.815 1.09e-08 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## (Dispersion parameter for gaussian family taken to be 0.03299176) ## ## Null deviance: 84.376 on 505 degrees of freedom ## Residual deviance: 16.199 on 491 degrees of freedom ## AIC: -273.48 ## ## Number of Fisher Scoring iterations: 2  my_ranger_log \u0026lt;- ranger(log(medv) ~ ., data = Boston, importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE)  pred_RF \u0026lt;- predict(my_ranger_log, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm_hr, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1)  For low predicted values both models differ in a systematic way. This suggests that there exists a remaining pattern that is picked up by RF but not by the OLS model.\npred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_log_diff \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_log_diff  ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## OOB prediction error (MSE): 0.009100275 ## R squared (OOB): 0.5311914  The RF indicates that 54% of the discrepancy can be \u0026ldquo;explained\u0026rdquo; by RF.\nmyres_tmp \u0026lt;- ranger::importance(my_ranger_log_diff) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)]  ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip()  Add the top 2 vars as an interaction to their model equation.\nmy_glm_hr_int \u0026lt;- glm(log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + tax + ptratio + black + I(black^2) + log(lstat) + crim + zn + indus + chas + I(nox^2) + lstat:nox, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_hr_int)  ## ## Call: ## glm(formula = log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + ## tax + ptratio + black + I(black^2) + log(lstat) + crim + ## zn + indus + chas + I(nox^2) + lstat:nox, family = \u0026quot;gaussian\u0026quot;, ## data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.70340 -0.09274 -0.00665 0.10068 0.75004 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.243e+00 1.613e-01 26.304 \u0026lt; 2e-16 *** ## I(rm^2) 7.053e-03 1.286e-03 5.484 6.66e-08 *** ## age -3.146e-04 5.174e-04 -0.608 0.54354 ## log(dis) -2.254e-01 3.317e-02 -6.795 3.15e-11 *** ## log(rad) 9.829e-02 1.862e-02 5.278 1.96e-07 *** ## tax -4.589e-04 1.196e-04 -3.838 0.00014 *** ## ptratio -2.990e-02 4.910e-03 -6.089 2.30e-09 *** ## black 1.445e-03 4.955e-04 2.917 0.00370 ** ## I(black^2) -2.470e-06 1.089e-06 -2.268 0.02376 * ## log(lstat) -2.143e-01 3.989e-02 -5.373 1.20e-07 *** ## crim -1.046e-02 1.238e-03 -8.448 3.40e-16 *** ## zn 7.309e-04 5.099e-04 1.434 0.15234 ## indus -8.166e-05 2.307e-03 -0.035 0.97178 ## chas 8.746e-02 3.231e-02 2.707 0.00704 ** ## I(nox^2) -3.618e-01 1.256e-01 -2.880 0.00415 ** ## lstat:nox -2.367e-02 4.819e-03 -4.911 1.24e-06 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## (Dispersion parameter for gaussian family taken to be 0.03150809) ## ## Null deviance: 84.376 on 505 degrees of freedom ## Residual deviance: 15.439 on 490 degrees of freedom ## AIC: -295.79 ## ## Number of Fisher Scoring iterations: 2  AIC(my_glm_hr)  ## [1] -273.4788  AIC(my_glm_hr_int)  ## [1] -295.7931  This results in a significant improvement!\nRepeat this procedure pred_RF \u0026lt;- predict(my_ranger_log, data = Boston) #pred_RF$predictions pred_GLM \u0026lt;- predict(my_glm_hr_int, data = Boston) plot(pred_RF$predictions, pred_GLM) abline(0, 1)  pred_diff \u0026lt;- pred_RF$predictions - pred_GLM my_ranger_log_diff2 \u0026lt;- ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) my_ranger_log_diff2  ## Ranger result ## ## Call: ## ranger(Ydiff ~ . - medv, data = data.table(Ydiff = pred_diff, Boston), importance = \u0026quot;permutation\u0026quot;, num.trees = 500, mtry = 5, replace = TRUE) ## ## Type: Regression ## Number of trees: 500 ## Sample size: 506 ## Number of independent variables: 13 ## Mtry: 5 ## Target node size: 5 ## Variable importance mode: permutation ## OOB prediction error (MSE): 0.008703804 ## R squared (OOB): 0.5204124  myres_tmp \u0026lt;- ranger::importance(my_ranger_log_diff2) myres \u0026lt;- cbind(names(myres_tmp), myres_tmp, i = 1) #my_rownames \u0026lt;- row.names(myres) myres \u0026lt;- data.table(myres) setnames(myres, \u0026quot;V1\u0026quot;, \u0026quot;varname\u0026quot;) setnames(myres, \u0026quot;myres_tmp\u0026quot;, \u0026quot;MeanDecreaseAccuracy\u0026quot;) myres \u0026lt;- myres[, varname := as.factor(varname)] myres \u0026lt;- myres[, MeanDecreaseAccuracy := as.numeric(MeanDecreaseAccuracy)] myres \u0026lt;- myres[, i := as.integer(i)]  ggplot(myres, aes(x = reorder(factor(varname), MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) + geom_point() + coord_flip()  Now we add lstat and dis as an interaction.\nmy_glm_hr_int2 \u0026lt;- glm(log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + tax + ptratio + black + I(black^2) + log(lstat) + crim + zn + indus + chas + I(nox^2) + lstat:nox + lstat:dis, data = Boston, family = \u0026quot;gaussian\u0026quot;) summary(my_glm_hr_int2)  ## ## Call: ## glm(formula = log(medv) ~ I(rm^2) + age + log(dis) + log(rad) + ## tax + ptratio + black + I(black^2) + log(lstat) + crim + ## zn + indus + chas + I(nox^2) + lstat:nox + lstat:dis, family = \u0026quot;gaussian\u0026quot;, ## data = Boston) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.70136 -0.08746 -0.00589 0.08857 0.76349 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.535e+00 1.712e-01 26.481 \u0026lt; 2e-16 *** ## I(rm^2) 7.498e-03 1.266e-03 5.924 5.94e-09 *** ## age -1.262e-03 5.504e-04 -2.293 0.02226 * ## log(dis) -4.065e-01 5.203e-02 -7.813 3.43e-14 *** ## log(rad) 9.668e-02 1.828e-02 5.290 1.85e-07 *** ## tax -4.622e-04 1.173e-04 -3.940 9.35e-05 *** ## ptratio -2.640e-02 4.881e-03 -5.409 9.93e-08 *** ## black 1.313e-03 4.871e-04 2.696 0.00727 ** ## I(black^2) -2.172e-06 1.071e-06 -2.029 0.04303 * ## log(lstat) -3.181e-01 4.553e-02 -6.987 9.23e-12 *** ## crim -1.049e-02 1.215e-03 -8.635 \u0026lt; 2e-16 *** ## zn 9.078e-04 5.019e-04 1.809 0.07108 . ## indus -2.733e-04 2.264e-03 -0.121 0.90395 ## chas 7.166e-02 3.191e-02 2.246 0.02515 * ## I(nox^2) -2.569e-01 1.255e-01 -2.048 0.04113 * ## lstat:nox -2.729e-02 4.798e-03 -5.689 2.21e-08 *** ## lstat:dis 3.906e-03 8.754e-04 4.462 1.01e-05 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## (Dispersion parameter for gaussian family taken to be 0.03033711) ## ## Null deviance: 84.376 on 505 degrees of freedom ## Residual deviance: 14.835 on 489 degrees of freedom ## AIC: -313.99 ## ## Number of Fisher Scoring iterations: 2  AIC(my_glm_hr_int2)  ## [1] -313.9904  AIC(my_glm_hr_int)  ## [1] -295.7931  And again we find an improvement in model fit.\nHave these interactions already been reported on in the literature? Tom Minka reports on his website an analysis of interactions in the Boston Housing set:\n(http://alumni.media.mit.edu/~tpminka/courses/36-350.2001/lectures/day30/)  \u0026gt; summary(fit3) Coefficients: Estimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) -227.5485 49.2363 -4.622 4.87e-06 *** lstat 50.8553 20.3184 2.503 0.012639 * rm 38.1245 7.0987 5.371 1.21e-07 *** dis -16.8163 2.9174 -5.764 1.45e-08 *** ptratio 14.9592 2.5847 5.788 1.27e-08 *** lstat:rm -6.8143 3.1209 -2.183 0.029475 * lstat:dis 4.8736 1.3940 3.496 0.000514 *** lstat:ptratio -3.3209 1.0345 -3.210 0.001412 ** rm:dis 2.0295 0.4435 4.576 5.99e-06 *** rm:ptratio -1.9911 0.3757 -5.299 1.76e-07 *** lstat:rm:dis -0.5216 0.2242 -2.327 0.020364 * lstat:rm:ptratio 0.3368 0.1588 2.121 0.034423 * \nRob mcCulloch, using BART (bayesian additive regression trees) also examines interactions in the Boston Housing data. There the co-occurence within trees is used to discover interactions:\nThe second, interaction detection, uncovers which pairs of variables interact in analogous fashion by keeping track of the percentage of trees in the sum in which both variables occur. This exploits the fact that a sum-of-trees model captures an interaction between xi and xj by using them both for splitting rules in the same tree.\nhttp://www.rob-mcculloch.org/some_papers_and_talks/papers/working/cgm_as.pdf\nConclusion We conclude that this appears a fruitfull approach to at least discovering where a regression model can be improved.\n","date":1506268448,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506268448,"objectID":"7b6e7a443c7c11d00ce98174762b1e76","permalink":"https://gsverhoeven.github.io/post/interaction_detection/","publishdate":"2017-09-24T16:54:08+01:00","relpermalink":"/post/interaction_detection/","section":"post","summary":"Comparing the predictions of a Random Forest model with the predictions of an Linear Regression model can inform us in what ways the OLS model can be improved. Here we explore the feasibility of this approach by modelling the classic Boston Housing dataset.\n","tags":["R","Machine Learning","Interaction detection"],"title":"Interaction detection using Random Forest predictions","type":"post"}]