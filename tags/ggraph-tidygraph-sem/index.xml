<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggraph, tidygraph, sem | Gertjan Verhoeven</title>
    <link>/tags/ggraph-tidygraph-sem/</link>
      <atom:link href="/tags/ggraph-tidygraph-sem/index.xml" rel="self" type="application/rss+xml" />
    <description>ggraph, tidygraph, sem</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019, 2020</copyright><lastBuildDate>Thu, 20 Jun 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>ggraph, tidygraph, sem</title>
      <link>/tags/ggraph-tidygraph-sem/</link>
    </image>
    
    <item>
      <title>ggraph: Nodes and edges in ggplot</title>
      <link>/post/ggplot-ggraph-sem-models/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/post/ggplot-ggraph-sem-models/</guid>
      <description>


&lt;div id=&#34;plotting-sem-models-using-ggraph&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plotting SEM models using ggraph&lt;/h1&gt;
&lt;p&gt;A recurring need in statistics is to create plots composed of nodes and edges.
This need arises for structural causal models, network analyses but also for psychometric latent factor models.&lt;/p&gt;
&lt;p&gt;I try to do all my visualizations in &lt;code&gt;ggplot&lt;/code&gt;. This allows me to build on what I learned previously, and increase my productivity with this tool. The grammar of graphics has been adapted to work with networks /graphs in the tidygraph / ggraph packages, so let’s give them a go!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-can-network-relational-data-be-tidy&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How can network / relational data be tidy?&lt;/h1&gt;
&lt;p&gt;In the words of &lt;strong&gt;Thomas Lin Pedersen&lt;/strong&gt;, the creator of tidygraph and ggraph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both node and edge data by itself fits very well within the tidy concept as each node and edge is, in a &amp;gt;sense, a single observation. Thus, a close approximation of tidyness for relational data is two tidy data &amp;gt;frames, one describing the node data and one describing the edge data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let ’s try to make a simple model for a Structural Equation Model (SEM) of a latent trait “Intelligence”.
This trait is measured by three questions (items), that are observed.
The three items have different “factor loadings”, numbers that we want to plot in the graph.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prep-data-to-plot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prep data to plot&lt;/h1&gt;
&lt;p&gt;We begin with loading the required R packages.
We need both &lt;strong&gt;tidygraph&lt;/strong&gt; (for the tidy object to hold the data) as well as &lt;strong&gt;ggraph&lt;/strong&gt; (to plot the data).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggraph)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidygraph)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;tidygraph&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start with defining the nodes.
We want a specific layout, so we define all positions manually.&lt;/p&gt;
&lt;p&gt;For SEM models, the convention is to represent latent traits as circles, and measured (observed) variables as squares. We encode each nodes type as a variable “latent” (TRUE or FALSE).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# nodes
param_nodes &amp;lt;- data.frame(name = c(&amp;quot;Item 1&amp;quot;, 
                                   &amp;quot;Item 2&amp;quot;, 
                                   &amp;quot;Item 3&amp;quot;, 
                                   &amp;quot;Intelligence&amp;quot;))

# circle or square symbol
param_nodes$latent &amp;lt;- c(F, F, F, T)

# positions (ggplot drawing surface scales from 0 to 1 in both dimensions)
param_nodes$x &amp;lt;- c(0, 0, 0, 1)

param_nodes$y &amp;lt;- c(0, 0.5, 1, 0.5)

param_nodes$nsize &amp;lt;- c(24, 24, 24, 36)

# shift the labels to be at the center of the node location
param_nodes$label_hjust &amp;lt;- c(1, 1, 1, 1)*0.5

param_nodes$label_vjust &amp;lt;- c(1, 1, 1, 1)*0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The edges define the connections between the nodes. They all originate from the latent node.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# edges
param_edges &amp;lt;- data.frame(from = c( 4, 4, 4), 
                            to = c( 1, 2, 3))

param_edges$coef &amp;lt;- c(0.5, 0.6, 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;tbl_graph()&lt;/code&gt; to combine both the node and edge datasets into a tidygraph object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create tidygraph object
my_tidygraph &amp;lt;- tidygraph::tbl_graph(param_nodes, 
                                    param_edges)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make-the-plot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Make the plot&lt;/h1&gt;
&lt;p&gt;Now we are ready to make the plot. We use the &lt;code&gt;manual&lt;/code&gt; layout to make ggraph use our predefined x- and y positions. &lt;code&gt;geom_edge_link()&lt;/code&gt; and &lt;code&gt;geom_node_point()&lt;/code&gt; do most of the work.&lt;/p&gt;
&lt;p&gt;I needed to use four &lt;code&gt;scale_*()&lt;/code&gt; calls to get all the scales right.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two to expand the drawing area to avoid the nodes from falling partly outside the drawing area,&lt;/li&gt;
&lt;li&gt;One to get the symbol sizes right,&lt;/li&gt;
&lt;li&gt;And one two manually specify the symbol shapes&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hp &amp;lt;- ggraph(my_tidygraph,
             layout = &amp;quot;manual&amp;quot;, 
             x = x, y = y) +
  geom_edge_link(aes(label = coef),
                 label_dodge = unit(2.5, &amp;#39;mm&amp;#39;),
                 alpha = 1,
                 linetype = 1, 
                 angle_calc = &amp;quot;along&amp;quot;,
                 start_cap = circle(1.2, &amp;#39;cm&amp;#39;),
                 end_cap = circle(1.0, &amp;#39;cm&amp;#39;),
                 arrow = arrow(angle = 45, 
                               length = unit(0.5, &amp;quot;cm&amp;quot;), 
                               type = &amp;quot;closed&amp;quot;,
                               ends = &amp;quot;last&amp;quot;)
                 ) +
  geom_node_point(aes(shape = as.factor(latent), size = nsize),
                  color = &amp;quot;grey&amp;quot;) +
  # Node names
  geom_node_text(aes(label = name,  hjust = label_hjust,
                 vjust = label_vjust), size = 5) + 
  # Get the scaling right
  scale_x_continuous(expand = expand_scale(0.2)) +
  scale_y_continuous(expand = expand_scale(0.2)) +
  # geom_point(x = 0, y = 0, col = &amp;quot;red&amp;quot;) + 
  # geom_point(x = 0, y = 1, col = &amp;quot;red&amp;quot;) + 
  # geom_point(x = 1, y = 0, col = &amp;quot;red&amp;quot;) + 
  # geom_point(x = 1, y = 1, col = &amp;quot;red&amp;quot;) + 
  # geom_point(x = 1.2, y = 1.2, col = &amp;quot;red&amp;quot;) + 
  scale_size_continuous(range = c(24, 36)) +
  scale_shape_manual(values = c(15, 19), guide = FALSE) +
  ggtitle(&amp;#39;Single latent factor model&amp;#39;) + 
  theme_graph() +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, display the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-20-ggraph_for_sem_blog_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;480&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hell yeah!&lt;/p&gt;
&lt;p&gt;PM add error correlation structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references-related-blog-posts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References / related blog posts&lt;/h1&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
